task_id: HumanEval/0
prompt: |
  from typing import List


  def has_close_elements(numbers: List[float], threshold: float) -> bool:
      """ Check if in given list of numbers, are any two numbers closer to each other than
      given threshold.
      >>> has_close_elements([1.0, 2.0, 3.0], 0.5)
      False
      >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)
      True
      """
entry_point: has_close_elements
canonical_solution: |2
      for idx, elem in enumerate(numbers):
          for idx2, elem2 in enumerate(numbers):
              if idx != idx2:
                  distance = abs(elem - elem2)
                  if distance < threshold:
                      return True

      return False
test: |2+


  METADATA = {
      'author': 'jt',
      'dataset': 'test'
  }


  def check(candidate):
      assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True
      assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False
      assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True
      assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False
      assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True
      assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True
      assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False

---
task_id: HumanEval/1
prompt: |
  from typing import List


  def separate_paren_groups(paren_string: str) -> List[str]:
      """ Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
      separate those group into separate strings and return the list of those.
      Separate groups are balanced (each open brace is properly closed) and not nested within each other
      Ignore any spaces in the input string.
      >>> separate_paren_groups('( ) (( )) (( )( ))')
      ['()', '(())', '(()())']
      """
entry_point: separate_paren_groups
canonical_solution: |2
      result = []
      current_string = []
      current_depth = 0

      for c in paren_string:
          if c == '(':
              current_depth += 1
              current_string.append(c)
          elif c == ')':
              current_depth -= 1
              current_string.append(c)

              if current_depth == 0:
                  result.append(''.join(current_string))
                  current_string.clear()

      return result
test: |2


  METADATA = {
      'author': 'jt',
      'dataset': 'test'
  }


  def check(candidate):
      assert candidate('(()()) ((())) () ((())()())') == [
          '(()())', '((()))', '()', '((())()())'
      ]
      assert candidate('() (()) ((())) (((())))') == [
          '()', '(())', '((()))', '(((())))'
      ]
      assert candidate('(()(())((())))') == [
          '(()(())((())))'
      ]
      assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']
---
task_id: HumanEval/2
prompt: |2


  def truncate_number(number: float) -> float:
      """ Given a positive floating point number, it can be decomposed into
      and integer part (largest integer smaller than given number) and decimals
      (leftover part always smaller than 1).

      Return the decimal part of the number.
      >>> truncate_number(3.5)
      0.5
      """
entry_point: truncate_number
canonical_solution: |2
      return number % 1.0
test: |2


  METADATA = {
      'author': 'jt',
      'dataset': 'test'
  }


  def check(candidate):
      assert candidate(3.5) == 0.5
      assert abs(candidate(1.33) - 0.33) < 1e-6
      assert abs(candidate(123.456) - 0.456) < 1e-6
---
task_id: HumanEval/3
prompt: |
  from typing import List


  def below_zero(operations: List[int]) -> bool:
      """ You're given a list of deposit and withdrawal operations on a bank account that starts with
      zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
      at that point function should return True. Otherwise it should return False.
      >>> below_zero([1, 2, 3])
      False
      >>> below_zero([1, 2, -4, 5])
      True
      """
entry_point: below_zero
canonical_solution: |2
      balance = 0

      for op in operations:
          balance += op
          if balance < 0:
              return True

      return False
test: |2


  METADATA = {
      'author': 'jt',
      'dataset': 'test'
  }


  def check(candidate):
      assert candidate([]) == False
      assert candidate([1, 2, -3, 1, 2, -3]) == False
      assert candidate([1, 2, -4, 5, 6]) == True
      assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False
      assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True
      assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True
---
task_id: HumanEval/4
prompt: |
  from typing import List


  def mean_absolute_deviation(numbers: List[float]) -> float:
      """ For a given list of input numbers, calculate Mean Absolute Deviation
      around the mean of this dataset.
      Mean Absolute Deviation is the average absolute difference between each
      element and a centerpoint (mean in this case):
      MAD = average | x - x_mean |
      >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])
      1.0
      """
entry_point: mean_absolute_deviation
canonical_solution: |2
      mean = sum(numbers) / len(numbers)
      return sum(abs(x - mean) for x in numbers) / len(numbers)
test: |2+


  METADATA = {
      'author': 'jt',
      'dataset': 'test'
  }


  def check(candidate):
      assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6
      assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6
      assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6

---
task_id: HumanEval/5
prompt: |
  from typing import List


  def intersperse(numbers: List[int], delimeter: int) -> List[int]:
      """ Insert a number 'delimeter' between every two consecutive elements of input list `numbers'
      >>> intersperse([], 4)
      []
      >>> intersperse([1, 2, 3], 4)
      [1, 4, 2, 4, 3]
      """
entry_point: intersperse
canonical_solution: |2
      if not numbers:
          return []

      result = []

      for n in numbers[:-1]:
          result.append(n)
          result.append(delimeter)

      result.append(numbers[-1])

      return result
test: |2


  METADATA = {
      'author': 'jt',
      'dataset': 'test'
  }


  def check(candidate):
      assert candidate([], 7) == []
      assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]
      assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]
---
task_id: HumanEval/6
prompt: |
  from typing import List


  def parse_nested_parens(paren_string: str) -> List[int]:
      """ Input to this function is a string represented multiple groups for nested parentheses separated by spaces.
      For each of the group, output the deepest level of nesting of parentheses.
      E.g. (()()) has maximum two levels of nesting while ((())) has three.

      >>> parse_nested_parens('(()()) ((())) () ((())()())')
      [2, 3, 1, 3]
      """
entry_point: parse_nested_parens
canonical_solution: |2
      def parse_paren_group(s):
          depth = 0
          max_depth = 0
          for c in s:
              if c == '(':
                  depth += 1
                  max_depth = max(depth, max_depth)
              else:
                  depth -= 1

          return max_depth

      return [parse_paren_group(x) for x in paren_string.split(' ') if x]
test: |2


  METADATA = {
      'author': 'jt',
      'dataset': 'test'
  }


  def check(candidate):
      assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]
      assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]
      assert candidate('(()(())((())))') == [4]
---
task_id: HumanEval/7
prompt: |
  from typing import List


  def filter_by_substring(strings: List[str], substring: str) -> List[str]:
      """ Filter an input list of strings only for ones that contain given substring
      >>> filter_by_substring([], 'a')
      []
      >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')
      ['abc', 'bacd', 'array']
      """
entry_point: filter_by_substring
canonical_solution: |2
      return [x for x in strings if substring in x]
test: |2


  METADATA = {
      'author': 'jt',
      'dataset': 'test'
  }


  def check(candidate):
      assert candidate([], 'john') == []
      assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
      assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']
      assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']
---
task_id: HumanEval/8
prompt: |
  from typing import List, Tuple


  def sum_product(numbers: List[int]) -> Tuple[int, int]:
      """ For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.
      Empty sum should be equal to 0 and empty product should be equal to 1.
      >>> sum_product([])
      (0, 1)
      >>> sum_product([1, 2, 3, 4])
      (10, 24)
      """
entry_point: sum_product
canonical_solution: |2
      sum_value = 0
      prod_value = 1

      for n in numbers:
          sum_value += n
          prod_value *= n
      return sum_value, prod_value
test: |2


  METADATA = {
      'author': 'jt',
      'dataset': 'test'
  }


  def check(candidate):
      assert candidate([]) == (0, 1)
      assert candidate([1, 1, 1]) == (3, 1)
      assert candidate([100, 0]) == (100, 0)
      assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)
      assert candidate([10]) == (10, 10)
---
task_id: HumanEval/9
prompt: |
  from typing import List, Tuple


  def rolling_max(numbers: List[int]) -> List[int]:
      """ From a given list of integers, generate a list of rolling maximum element found until given moment
      in the sequence.
      >>> rolling_max([1, 2, 3, 2, 3, 4, 2])
      [1, 2, 3, 3, 3, 4, 4]
      """
entry_point: rolling_max
canonical_solution: |2
      running_max = None
      result = []

      for n in numbers:
          if running_max is None:
              running_max = n
          else:
              running_max = max(running_max, n)

          result.append(running_max)

      return result
test: |2


  METADATA = {
      'author': 'jt',
      'dataset': 'test'
  }


  def check(candidate):
      assert candidate([]) == []
      assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
      assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]
      assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]
---
task_id: HumanEval/10
prompt: |2


  def is_palindrome(string: str) -> bool:
      """ Test if given string is a palindrome """
      return string == string[::-1]


  def make_palindrome(string: str) -> str:
      """ Find the shortest palindrome that begins with a supplied string.
      Algorithm idea is simple:
      - Find the longest postfix of supplied string that is a palindrome.
      - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
      >>> make_palindrome('')
      ''
      >>> make_palindrome('cat')
      'catac'
      >>> make_palindrome('cata')
      'catac'
      """
entry_point: make_palindrome
canonical_solution: |2
      if not string:
          return ''

      beginning_of_suffix = 0

      while not is_palindrome(string[beginning_of_suffix:]):
          beginning_of_suffix += 1

      return string + string[:beginning_of_suffix][::-1]
test: |2


  METADATA = {
      'author': 'jt',
      'dataset': 'test'
  }


  def check(candidate):
      assert candidate('') == ''
      assert candidate('x') == 'x'
      assert candidate('xyz') == 'xyzyx'
      assert candidate('xyx') == 'xyx'
      assert candidate('jerry') == 'jerryrrej'
---
task_id: HumanEval/11
prompt: |
  from typing import List


  def string_xor(a: str, b: str) -> str:
      """ Input are two strings a and b consisting only of 1s and 0s.
      Perform binary XOR on these inputs and return result also as a string.
      >>> string_xor('010', '110')
      '100'
      """
entry_point: string_xor
canonical_solution: |2
      def xor(i, j):
          if i == j:
              return '0'
          else:
              return '1'

      return ''.join(xor(x, y) for x, y in zip(a, b))
test: |2


  METADATA = {
      'author': 'jt',
      'dataset': 'test'
  }


  def check(candidate):
      assert candidate('111000', '101010') == '010010'
      assert candidate('1', '1') == '0'
      assert candidate('0101', '0000') == '0101'
---
task_id: HumanEval/12
prompt: |
  from typing import List, Optional


  def longest(strings: List[str]) -> Optional[str]:
      """ Out of list of strings, return the longest one. Return the first one in case of multiple
      strings of the same length. Return None in case the input list is empty.
      >>> longest([])

      >>> longest(['a', 'b', 'c'])
      'a'
      >>> longest(['a', 'bb', 'ccc'])
      'ccc'
      """
entry_point: longest
canonical_solution: |2
      if not strings:
          return None

      maxlen = max(len(x) for x in strings)
      for s in strings:
          if len(s) == maxlen:
              return s
test: |2


  METADATA = {
      'author': 'jt',
      'dataset': 'test'
  }


  def check(candidate):
      assert candidate([]) == None
      assert candidate(['x', 'y', 'z']) == 'x'
      assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'
---
task_id: HumanEval/13
prompt: |2


  def greatest_common_divisor(a: int, b: int) -> int:
      """ Return a greatest common divisor of two integers a and b
      >>> greatest_common_divisor(3, 5)
      1
      >>> greatest_common_divisor(25, 15)
      5
      """
entry_point: greatest_common_divisor
canonical_solution: |2
      while b:
          a, b = b, a % b
      return a
test: |2


  METADATA = {
      'author': 'jt',
      'dataset': 'test'
  }


  def check(candidate):
      assert candidate(3, 7) == 1
      assert candidate(10, 15) == 5
      assert candidate(49, 14) == 7
      assert candidate(144, 60) == 12
---
task_id: HumanEval/14
prompt: |
  from typing import List


  def all_prefixes(string: str) -> List[str]:
      """ Return list of all prefixes from shortest to longest of the input string
      >>> all_prefixes('abc')
      ['a', 'ab', 'abc']
      """
entry_point: all_prefixes
canonical_solution: |2
      result = []

      for i in range(len(string)):
          result.append(string[:i+1])
      return result
test: |2


  METADATA = {
      'author': 'jt',
      'dataset': 'test'
  }


  def check(candidate):
      assert candidate('') == []
      assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']
      assert candidate('WWW') == ['W', 'WW', 'WWW']
---
task_id: HumanEval/15
prompt: |2


  def string_sequence(n: int) -> str:
      """ Return a string containing space-delimited numbers starting from 0 upto n inclusive.
      >>> string_sequence(0)
      '0'
      >>> string_sequence(5)
      '0 1 2 3 4 5'
      """
entry_point: string_sequence
canonical_solution: |2
      return ' '.join([str(x) for x in range(n + 1)])
test: |2


  METADATA = {
      'author': 'jt',
      'dataset': 'test'
  }


  def check(candidate):
      assert candidate(0) == '0'
      assert candidate(3) == '0 1 2 3'
      assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'
---
task_id: HumanEval/16
prompt: |2


  def count_distinct_characters(string: str) -> int:
      """ Given a string, find out how many distinct characters (regardless of case) does it consist of
      >>> count_distinct_characters('xyzXYZ')
      3
      >>> count_distinct_characters('Jerry')
      4
      """
entry_point: count_distinct_characters
canonical_solution: |2
      return len(set(string.lower()))
test: |2


  METADATA = {
      'author': 'jt',
      'dataset': 'test'
  }


  def check(candidate):
      assert candidate('') == 0
      assert candidate('abcde') == 5
      assert candidate('abcde' + 'cade' + 'CADE') == 5
      assert candidate('aaaaAAAAaaaa') == 1
      assert candidate('Jerry jERRY JeRRRY') == 5
---
task_id: HumanEval/17
prompt: |
  from typing import List


  def parse_music(music_string: str) -> List[int]:
      """ Input to this function is a string representing musical notes in a special ASCII format.
      Your task is to parse this string and return list of integers corresponding to how many beats does each
      not last.

      Here is a legend:
      'o' - whole note, lasts four beats
      'o|' - half note, lasts two beats
      '.|' - quater note, lasts one beat

      >>> parse_music('o o| .| o| o| .| .| .| .| o o')
      [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]
      """
entry_point: parse_music
canonical_solution: |2
      note_map = {'o': 4, 'o|': 2, '.|': 1}
      return [note_map[x] for x in music_string.split(' ') if x]
test: |2


  METADATA = {
      'author': 'jt',
      'dataset': 'test'
  }


  def check(candidate):
      assert candidate('') == []
      assert candidate('o o o o') == [4, 4, 4, 4]
      assert candidate('.| .| .| .|') == [1, 1, 1, 1]
      assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]
      assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]
---
task_id: HumanEval/18
prompt: |2


  def how_many_times(string: str, substring: str) -> int:
      """ Find how many times a given substring can be found in the original string. Count overlaping cases.
      >>> how_many_times('', 'a')
      0
      >>> how_many_times('aaa', 'a')
      3
      >>> how_many_times('aaaa', 'aa')
      3
      """
entry_point: how_many_times
canonical_solution: |2
      times = 0

      for i in range(len(string) - len(substring) + 1):
          if string[i:i+len(substring)] == substring:
              times += 1

      return times
test: |2


  METADATA = {
      'author': 'jt',
      'dataset': 'test'
  }


  def check(candidate):
      assert candidate('', 'x') == 0
      assert candidate('xyxyxyx', 'x') == 4
      assert candidate('cacacacac', 'cac') == 4
      assert candidate('john doe', 'john') == 1
---
task_id: HumanEval/19
prompt: |
  from typing import List


  def sort_numbers(numbers: str) -> str:
      """ Input is a space-delimited string of numberals from 'zero' to 'nine'.
      Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
      Return the string with numbers sorted from smallest to largest
      >>> sort_numbers('three one five')
      'one three five'
      """
entry_point: sort_numbers
canonical_solution: |2
      value_map = {
          'zero': 0,
          'one': 1,
          'two': 2,
          'three': 3,
          'four': 4,
          'five': 5,
          'six': 6,
          'seven': 7,
          'eight': 8,
          'nine': 9
      }
      return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))
test: |2


  METADATA = {
      'author': 'jt',
      'dataset': 'test'
  }


  def check(candidate):
      assert candidate('') == ''
      assert candidate('three') == 'three'
      assert candidate('three five nine') == 'three five nine'
      assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'
      assert candidate('six five four three two one zero') == 'zero one two three four five six'
---
task_id: HumanEval/20
prompt: |
  from typing import List, Tuple


  def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
      """ From a supplied list of numbers (of length at least two) select and return two that are the closest to each
      other and return them in order (smaller number, larger number).
      >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])
      (2.0, 2.2)
      >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])
      (2.0, 2.0)
      """
entry_point: find_closest_elements
canonical_solution: |2
      closest_pair = None
      distance = None

      for idx, elem in enumerate(numbers):
          for idx2, elem2 in enumerate(numbers):
              if idx != idx2:
                  if distance is None:
                      distance = abs(elem - elem2)
                      closest_pair = tuple(sorted([elem, elem2]))
                  else:
                      new_distance = abs(elem - elem2)
                      if new_distance < distance:
                          distance = new_distance
                          closest_pair = tuple(sorted([elem, elem2]))

      return closest_pair
test: |2+


  METADATA = {
      'author': 'jt',
      'dataset': 'test'
  }


  def check(candidate):
      assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)
      assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)
      assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)
      assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)
      assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)

---
task_id: HumanEval/21
prompt: |
  from typing import List


  def rescale_to_unit(numbers: List[float]) -> List[float]:
      """ Given list of numbers (of at least two elements), apply a linear transform to that list,
      such that the smallest number will become 0 and the largest will become 1
      >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])
      [0.0, 0.25, 0.5, 0.75, 1.0]
      """
entry_point: rescale_to_unit
canonical_solution: |2
      min_number = min(numbers)
      max_number = max(numbers)
      return [(x - min_number) / (max_number - min_number) for x in numbers]
test: |2


  METADATA = {
      'author': 'jt',
      'dataset': 'test'
  }


  def check(candidate):
      assert candidate([2.0, 49.9]) == [0.0, 1.0]
      assert candidate([100.0, 49.9]) == [1.0, 0.0]
      assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]
      assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
      assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]
---
task_id: HumanEval/22
prompt: |
  from typing import List, Any


  def filter_integers(values: List[Any]) -> List[int]:
      """ Filter given list of any python values only for integers
      >>> filter_integers(['a', 3.14, 5])
      [5]
      >>> filter_integers([1, 2, 3, 'abc', {}, []])
      [1, 2, 3]
      """
entry_point: filter_integers
canonical_solution: |2
      return [x for x in values if isinstance(x, int)]
test: |2


  METADATA = {
      'author': 'jt',
      'dataset': 'test'
  }


  def check(candidate):
      assert candidate([]) == []
      assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]
      assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]
---
task_id: HumanEval/23
prompt: |2


  def strlen(string: str) -> int:
      """ Return length of given string
      >>> strlen('')
      0
      >>> strlen('abc')
      3
      """
entry_point: strlen
canonical_solution: |2
      return len(string)
test: |2


  METADATA = {
      'author': 'jt',
      'dataset': 'test'
  }


  def check(candidate):
      assert candidate('') == 0
      assert candidate('x') == 1
      assert candidate('asdasnakj') == 9
---
task_id: HumanEval/24
prompt: |2


  def largest_divisor(n: int) -> int:
      """ For a given number n, find the largest number that divides n evenly, smaller than n
      >>> largest_divisor(15)
      5
      """
entry_point: largest_divisor
canonical_solution: |2
      for i in reversed(range(n)):
          if n % i == 0:
              return i
test: |2


  METADATA = {
      'author': 'jt',
      'dataset': 'test'
  }


  def check(candidate):
      assert candidate(3) == 1
      assert candidate(7) == 1
      assert candidate(10) == 5
      assert candidate(100) == 50
      assert candidate(49) == 7
---
task_id: HumanEval/25
prompt: |
  from typing import List


  def factorize(n: int) -> List[int]:
      """ Return list of prime factors of given integer in the order from smallest to largest.
      Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.
      Input number should be equal to the product of all factors
      >>> factorize(8)
      [2, 2, 2]
      >>> factorize(25)
      [5, 5]
      >>> factorize(70)
      [2, 5, 7]
      """
entry_point: factorize
canonical_solution: |2
      import math
      fact = []
      i = 2
      while i <= int(math.sqrt(n) + 1):
          if n % i == 0:
              fact.append(i)
              n //= i
          else:
              i += 1

      if n > 1:
          fact.append(n)
      return fact
test: |2


  METADATA = {
      'author': 'jt',
      'dataset': 'test'
  }


  def check(candidate):
      assert candidate(2) == [2]
      assert candidate(4) == [2, 2]
      assert candidate(8) == [2, 2, 2]
      assert candidate(3 * 19) == [3, 19]
      assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]
      assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]
      assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]
      assert candidate(3 * 2 * 3) == [2, 3, 3]
---
task_id: HumanEval/26
prompt: |
  from typing import List


  def remove_duplicates(numbers: List[int]) -> List[int]:
      """ From a list of integers, remove all elements that occur more than once.
      Keep order of elements left the same as in the input.
      >>> remove_duplicates([1, 2, 3, 2, 4])
      [1, 3, 4]
      """
entry_point: remove_duplicates
canonical_solution: |2
      import collections
      c = collections.Counter(numbers)
      return [n for n in numbers if c[n] <= 1]
test: |2


  METADATA = {
      'author': 'jt',
      'dataset': 'test'
  }


  def check(candidate):
      assert candidate([]) == []
      assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]
      assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]
---
task_id: HumanEval/27
prompt: |2


  def flip_case(string: str) -> str:
      """ For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
      >>> flip_case('Hello')
      'hELLO'
      """
entry_point: flip_case
canonical_solution: |2
      return string.swapcase()
test: |2


  METADATA = {
      'author': 'jt',
      'dataset': 'test'
  }


  def check(candidate):
      assert candidate('') == ''
      assert candidate('Hello!') == 'hELLO!'
      assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'
---
task_id: HumanEval/28
prompt: |
  from typing import List


  def concatenate(strings: List[str]) -> str:
      """ Concatenate list of strings into a single string
      >>> concatenate([])
      ''
      >>> concatenate(['a', 'b', 'c'])
      'abc'
      """
entry_point: concatenate
canonical_solution: |2
      return ''.join(strings)
test: |2


  METADATA = {
      'author': 'jt',
      'dataset': 'test'
  }


  def check(candidate):
      assert candidate([]) == ''
      assert candidate(['x', 'y', 'z']) == 'xyz'
      assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'
---
task_id: HumanEval/29
prompt: |
  from typing import List


  def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
      """ Filter an input list of strings only for ones that start with a given prefix.
      >>> filter_by_prefix([], 'a')
      []
      >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')
      ['abc', 'array']
      """
entry_point: filter_by_prefix
canonical_solution: |2
      return [x for x in strings if x.startswith(prefix)]
test: |2


  METADATA = {
      'author': 'jt',
      'dataset': 'test'
  }


  def check(candidate):
      assert candidate([], 'john') == []
      assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']
---
task_id: HumanEval/30
prompt: |2


  def get_positive(l: list):
      """Return only positive numbers in the list.
      >>> get_positive([-1, 2, -4, 5, 6])
      [2, 5, 6]
      >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
      [5, 3, 2, 3, 9, 123, 1]
      """
entry_point: get_positive
canonical_solution: |2
      return [e for e in l if e > 0]
test: |2+


  METADATA = {}


  def check(candidate):
      assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]
      assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]
      assert candidate([-1, -2]) == []
      assert candidate([]) == []

---
task_id: HumanEval/31
prompt: |2


  def is_prime(n):
      """Return true if a given number is prime, and false otherwise.
      >>> is_prime(6)
      False
      >>> is_prime(101)
      True
      >>> is_prime(11)
      True
      >>> is_prime(13441)
      True
      >>> is_prime(61)
      True
      >>> is_prime(4)
      False
      >>> is_prime(1)
      False
      """
entry_point: is_prime
canonical_solution: |2
      if n < 2:
          return False
      for k in range(2, n - 1):
          if n % k == 0:
              return False
      return True
test: |2+


  METADATA = {}


  def check(candidate):
      assert candidate(6) == False
      assert candidate(101) == True
      assert candidate(11) == True
      assert candidate(13441) == True
      assert candidate(61) == True
      assert candidate(4) == False
      assert candidate(1) == False
      assert candidate(5) == True
      assert candidate(11) == True
      assert candidate(17) == True
      assert candidate(5 * 17) == False
      assert candidate(11 * 7) == False
      assert candidate(13441 * 19) == False

---
task_id: HumanEval/32
prompt: |
  import math


  def poly(xs: list, x: float):
      """
      Evaluates polynomial with coefficients xs at point x.
      return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n
      """
      return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


  def find_zero(xs: list):
      """ xs are coefficients of a polynomial.
      find_zero find x such that poly(x) = 0.
      find_zero returns only only zero point, even if there are many.
      Moreover, find_zero only takes list xs having even number of coefficients
      and largest non zero coefficient as it guarantees
      a solution.
      >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x
      -0.5
      >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3
      1.0
      """
entry_point: find_zero
canonical_solution: |2
      begin, end = -1., 1.
      while poly(xs, begin) * poly(xs, end) > 0:
          begin *= 2.0
          end *= 2.0
      while end - begin > 1e-10:
          center = (begin + end) / 2.0
          if poly(xs, center) * poly(xs, begin) > 0:
              begin = center
          else:
              end = center
      return begin
test: |2+


  METADATA = {}


  def check(candidate):
      import math
      import random
      rng = random.Random(42)
      import copy
      for _ in range(100):
          ncoeff = 2 * rng.randint(1, 4)
          coeffs = []
          for _ in range(ncoeff):
              coeff = rng.randint(-10, 10)
              if coeff == 0:
                  coeff = 1
              coeffs.append(coeff)
          solution = candidate(copy.deepcopy(coeffs))
          assert math.fabs(poly(coeffs, solution)) < 1e-4

---
task_id: HumanEval/33
prompt: |2


  def sort_third(l: list):
      """This function takes a list l and returns a list l' such that
      l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal
      to the values of the corresponding indicies of l, but sorted.
      >>> sort_third([1, 2, 3])
      [1, 2, 3]
      >>> sort_third([5, 6, 3, 4, 8, 9, 2])
      [2, 6, 3, 4, 8, 9, 5]
      """
entry_point: sort_third
canonical_solution: |2
      l = list(l)
      l[::3] = sorted(l[::3])
      return l
test: |2+


  METADATA = {}


  def check(candidate):
      assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))
      assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))
      assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))
      assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])
      assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])
      assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])
      assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])

---
task_id: HumanEval/34
prompt: |2


  def unique(l: list):
      """Return sorted unique elements in a list
      >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])
      [0, 2, 3, 5, 9, 123]
      """
entry_point: unique
canonical_solution: |2
      return sorted(list(set(l)))
test: |2+


  METADATA = {}


  def check(candidate):
      assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]

---
task_id: HumanEval/35
prompt: |2


  def max_element(l: list):
      """Return maximum element in the list.
      >>> max_element([1, 2, 3])
      3
      >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
      123
      """
entry_point: max_element
canonical_solution: |2
      m = l[0]
      for e in l:
          if e > m:
              m = e
      return m
test: |2


  METADATA = {}


  def check(candidate):
      assert candidate([1, 2, 3]) == 3
      assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124
---
task_id: HumanEval/36
prompt: |2


  def fizz_buzz(n: int):
      """Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.
      >>> fizz_buzz(50)
      0
      >>> fizz_buzz(78)
      2
      >>> fizz_buzz(79)
      3
      """
entry_point: fizz_buzz
canonical_solution: |2
      ns = []
      for i in range(n):
          if i % 11 == 0 or i % 13 == 0:
              ns.append(i)
      s = ''.join(list(map(str, ns)))
      ans = 0
      for c in s:
          ans += (c == '7')
      return ans
test: |2+


  METADATA = {}


  def check(candidate):
      assert candidate(50) == 0
      assert candidate(78) == 2
      assert candidate(79) == 3
      assert candidate(100) == 3
      assert candidate(200) == 6
      assert candidate(4000) == 192
      assert candidate(10000) == 639
      assert candidate(100000) == 8026

---
task_id: HumanEval/37
prompt: |2


  def sort_even(l: list):
      """This function takes a list l and returns a list l' such that
      l' is identical to l in the odd indicies, while its values at the even indicies are equal
      to the values of the even indicies of l, but sorted.
      >>> sort_even([1, 2, 3])
      [1, 2, 3]
      >>> sort_even([5, 6, 3, 4])
      [3, 6, 5, 4]
      """
entry_point: sort_even
canonical_solution: |2
      evens = l[::2]
      odds = l[1::2]
      evens.sort()
      ans = []
      for e, o in zip(evens, odds):
          ans.extend([e, o])
      if len(evens) > len(odds):
          ans.append(evens[-1])
      return ans
test: |2+


  METADATA = {}


  def check(candidate):
      assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])
      assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])
      assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])

---
task_id: HumanEval/38
prompt: |2


  def encode_cyclic(s: str):
      """
      returns encoded string by cycling groups of three characters.
      """
      # split string to groups. Each of length 3.
      groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
      # cycle elements in each group. Unless group has fewer elements than 3.
      groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
      return "".join(groups)


  def decode_cyclic(s: str):
      """
      takes as input string encoded with encode_cyclic function. Returns decoded string.
      """
entry_point: decode_cyclic
canonical_solution: |2
      return encode_cyclic(encode_cyclic(s))
test: |2+


  METADATA = {}


  def check(candidate):
      from random import randint, choice
      import string

      letters = string.ascii_lowercase
      for _ in range(100):
          str = ''.join(choice(letters) for i in range(randint(10, 20)))
          encoded_str = encode_cyclic(str)
          assert candidate(encoded_str) == str

---
task_id: HumanEval/39
prompt: |2


  def prime_fib(n: int):
      """
      prime_fib returns n-th number that is a Fibonacci number and it's also prime.
      >>> prime_fib(1)
      2
      >>> prime_fib(2)
      3
      >>> prime_fib(3)
      5
      >>> prime_fib(4)
      13
      >>> prime_fib(5)
      89
      """
entry_point: prime_fib
canonical_solution: |2
      import math

      def is_prime(p):
          if p < 2:
              return False
          for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
              if p % k == 0:
                  return False
          return True
      f = [0, 1]
      while True:
          f.append(f[-1] + f[-2])
          if is_prime(f[-1]):
              n -= 1
          if n == 0:
              return f[-1]
test: |2+


  METADATA = {}


  def check(candidate):
      assert candidate(1) == 2
      assert candidate(2) == 3
      assert candidate(3) == 5
      assert candidate(4) == 13
      assert candidate(5) == 89
      assert candidate(6) == 233
      assert candidate(7) == 1597
      assert candidate(8) == 28657
      assert candidate(9) == 514229
      assert candidate(10) == 433494437

---
task_id: HumanEval/40
prompt: |2


  def triples_sum_to_zero(l: list):
      """
      triples_sum_to_zero takes a list of integers as an input.
      it returns True if there are three distinct elements in the list that
      sum to zero, and False otherwise.

      >>> triples_sum_to_zero([1, 3, 5, 0])
      False
      >>> triples_sum_to_zero([1, 3, -2, 1])
      True
      >>> triples_sum_to_zero([1, 2, 3, 7])
      False
      >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])
      True
      >>> triples_sum_to_zero([1])
      False
      """
entry_point: triples_sum_to_zero
canonical_solution: |2
      for i in range(len(l)):
          for j in range(i + 1, len(l)):
              for k in range(j + 1, len(l)):
                  if l[i] + l[j] + l[k] == 0:
                      return True
      return False
test: |2+


  METADATA = {}


  def check(candidate):
      assert candidate([1, 3, 5, 0]) == False
      assert candidate([1, 3, 5, -1]) == False
      assert candidate([1, 3, -2, 1]) == True
      assert candidate([1, 2, 3, 7]) == False
      assert candidate([1, 2, 5, 7]) == False
      assert candidate([2, 4, -5, 3, 9, 7]) == True
      assert candidate([1]) == False
      assert candidate([1, 3, 5, -100]) == False
      assert candidate([100, 3, 5, -100]) == False

---
task_id: HumanEval/41
prompt: |2


  def car_race_collision(n: int):
      """
      Imagine a road that's a perfectly straight infinitely long line.
      n cars are driving left to right;  simultaneously, a different set of n cars
      are driving right to left.   The two sets of cars start out being very far from
      each other.  All cars move in the same speed.  Two cars are said to collide
      when a car that's moving left to right hits a car that's moving right to left.
      However, the cars are infinitely sturdy and strong; as a result, they continue moving
      in their trajectory as if they did not collide.

      This function outputs the number of such collisions.
      """
entry_point: car_race_collision
canonical_solution: |2
      return n**2
test: |2+


  METADATA = {}


  def check(candidate):
      assert candidate(2) == 4
      assert candidate(3) == 9
      assert candidate(4) == 16
      assert candidate(8) == 64
      assert candidate(10) == 100

---
task_id: HumanEval/42
prompt: |2


  def incr_list(l: list):
      """Return list with elements incremented by 1.
      >>> incr_list([1, 2, 3])
      [2, 3, 4]
      >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])
      [6, 4, 6, 3, 4, 4, 10, 1, 124]
      """
entry_point: incr_list
canonical_solution: |2
      return [(e + 1) for e in l]
test: |2+


  METADATA = {}


  def check(candidate):
      assert candidate([]) == []
      assert candidate([3, 2, 1]) == [4, 3, 2]
      assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]

---
task_id: HumanEval/43
prompt: |2


  def pairs_sum_to_zero(l):
      """
      pairs_sum_to_zero takes a list of integers as an input.
      it returns True if there are two distinct elements in the list that
      sum to zero, and False otherwise.
      >>> pairs_sum_to_zero([1, 3, 5, 0])
      False
      >>> pairs_sum_to_zero([1, 3, -2, 1])
      False
      >>> pairs_sum_to_zero([1, 2, 3, 7])
      False
      >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])
      True
      >>> pairs_sum_to_zero([1])
      False
      """
entry_point: pairs_sum_to_zero
canonical_solution: |2
      for i, l1 in enumerate(l):
          for j in range(i + 1, len(l)):
              if l1 + l[j] == 0:
                  return True
      return False
test: |2+


  METADATA = {}


  def check(candidate):
      assert candidate([1, 3, 5, 0]) == False
      assert candidate([1, 3, -2, 1]) == False
      assert candidate([1, 2, 3, 7]) == False
      assert candidate([2, 4, -5, 3, 5, 7]) == True
      assert candidate([1]) == False

      assert candidate([-3, 9, -1, 3, 2, 30]) == True
      assert candidate([-3, 9, -1, 3, 2, 31]) == True
      assert candidate([-3, 9, -1, 4, 2, 30]) == False
      assert candidate([-3, 9, -1, 4, 2, 31]) == False

---
task_id: HumanEval/44
prompt: |2


  def change_base(x: int, base: int):
      """Change numerical base of input number x to base.
      return string representation after the conversion.
      base numbers are less than 10.
      >>> change_base(8, 3)
      '22'
      >>> change_base(8, 2)
      '1000'
      >>> change_base(7, 2)
      '111'
      """
entry_point: change_base
canonical_solution: |2
      ret = ""
      while x > 0:
          ret = str(x % base) + ret
          x //= base
      return ret
test: |2+


  METADATA = {}


  def check(candidate):
      assert candidate(8, 3) == "22"
      assert candidate(9, 3) == "100"
      assert candidate(234, 2) == "11101010"
      assert candidate(16, 2) == "10000"
      assert candidate(8, 2) == "1000"
      assert candidate(7, 2) == "111"
      for x in range(2, 8):
          assert candidate(x, x + 1) == str(x)

---
task_id: HumanEval/45
prompt: |2


  def triangle_area(a, h):
      """Given length of a side and high return area for a triangle.
      >>> triangle_area(5, 3)
      7.5
      """
entry_point: triangle_area
canonical_solution: |2
      return a * h / 2.0
test: |2+


  METADATA = {}


  def check(candidate):
      assert candidate(5, 3) == 7.5
      assert candidate(2, 2) == 2.0
      assert candidate(10, 8) == 40.0

---
task_id: HumanEval/46
prompt: |2


  def fib4(n: int):
      """The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:
      fib4(0) -> 0
      fib4(1) -> 0
      fib4(2) -> 2
      fib4(3) -> 0
      fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).
      Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.
      >>> fib4(5)
      4
      >>> fib4(6)
      8
      >>> fib4(7)
      14
      """
entry_point: fib4
canonical_solution: |2
      results = [0, 0, 2, 0]
      if n < 4:
          return results[n]

      for _ in range(4, n + 1):
          results.append(results[-1] + results[-2] + results[-3] + results[-4])
          results.pop(0)

      return results[-1]
test: |2+


  METADATA = {}


  def check(candidate):
      assert candidate(5) == 4
      assert candidate(8) == 28
      assert candidate(10) == 104
      assert candidate(12) == 386

---
task_id: HumanEval/47
prompt: |2


  def median(l: list):
      """Return median of elements in the list l.
      >>> median([3, 1, 2, 4, 5])
      3
      >>> median([-10, 4, 6, 1000, 10, 20])
      15.0
      """
entry_point: median
canonical_solution: |2
      l = sorted(l)
      if len(l) % 2 == 1:
          return l[len(l) // 2]
      else:
          return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0
test: "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 \n\n"
---
task_id: HumanEval/48
prompt: |2


  def is_palindrome(text: str):
      """
      Checks if given string is a palindrome
      >>> is_palindrome('')
      True
      >>> is_palindrome('aba')
      True
      >>> is_palindrome('aaaaa')
      True
      >>> is_palindrome('zbcd')
      False
      """
entry_point: is_palindrome
canonical_solution: |2
      for i in range(len(text)):
          if text[i] != text[len(text) - 1 - i]:
              return False
      return True
test: |2+


  METADATA = {}


  def check(candidate):
      assert candidate('') == True
      assert candidate('aba') == True
      assert candidate('aaaaa') == True
      assert candidate('zbcd') == False
      assert candidate('xywyx') == True
      assert candidate('xywyz') == False
      assert candidate('xywzx') == False

---
task_id: HumanEval/49
prompt: |2


  def modp(n: int, p: int):
      """Return 2^n modulo p (be aware of numerics).
      >>> modp(3, 5)
      3
      >>> modp(1101, 101)
      2
      >>> modp(0, 101)
      1
      >>> modp(3, 11)
      8
      >>> modp(100, 101)
      1
      """
entry_point: modp
canonical_solution: |2
      ret = 1
      for i in range(n):
          ret = (2 * ret) % p
      return ret
test: |2+


  METADATA = {}


  def check(candidate):
      assert candidate(3, 5) == 3
      assert candidate(1101, 101) == 2
      assert candidate(0, 101) == 1
      assert candidate(3, 11) == 8
      assert candidate(100, 101) == 1
      assert candidate(30, 5) == 4
      assert candidate(31, 5) == 3

---
task_id: HumanEval/50
prompt: |2


  def encode_shift(s: str):
      """
      returns encoded string by shifting every character by 5 in the alphabet.
      """
      return "".join([chr(((ord(ch) + 5 - ord("a")) % 26) + ord("a")) for ch in s])


  def decode_shift(s: str):
      """
      takes as input string encoded with encode_shift function. Returns decoded string.
      """
entry_point: decode_shift
canonical_solution: |2
      return "".join([chr(((ord(ch) - 5 - ord("a")) % 26) + ord("a")) for ch in s])
test: |2+


  METADATA = {}


  def check(candidate):
      from random import randint, choice
      import copy
      import string

      letters = string.ascii_lowercase
      for _ in range(100):
          str = ''.join(choice(letters) for i in range(randint(10, 20)))
          encoded_str = encode_shift(str)
          assert candidate(copy.deepcopy(encoded_str)) == str

---
task_id: HumanEval/51
prompt: |2


  def remove_vowels(text):
      """
      remove_vowels is a function that takes string and returns string without vowels.
      >>> remove_vowels('')
      ''
      >>> remove_vowels("abcdef\nghijklm")
      'bcdf\nghjklm'
      >>> remove_vowels('abcdef')
      'bcdf'
      >>> remove_vowels('aaaaa')
      ''
      >>> remove_vowels('aaBAA')
      'B'
      >>> remove_vowels('zbcd')
      'zbcd'
      """
entry_point: remove_vowels
canonical_solution: |2
      return "".join([s for s in text if s.lower() not in ["a", "e", "i", "o", "u"]])
test: |2+


  METADATA = {}


  def check(candidate):
      assert candidate('') == ''
      assert candidate("abcdef\nghijklm") == 'bcdf\nghjklm'
      assert candidate('fedcba') == 'fdcb'
      assert candidate('eeeee') == ''
      assert candidate('acBAA') == 'cB'
      assert candidate('EcBOO') == 'cB'
      assert candidate('ybcd') == 'ybcd'

---
task_id: HumanEval/52
prompt: |2


  def below_threshold(l: list, t: int):
      """Return True if all numbers in the list l are below threshold t.
      >>> below_threshold([1, 2, 4, 10], 100)
      True
      >>> below_threshold([1, 20, 4, 10], 5)
      False
      """
entry_point: below_threshold
canonical_solution: |2
      for e in l:
          if e >= t:
              return False
      return True
test: |2+


  METADATA = {}


  def check(candidate):
      assert candidate([1, 2, 4, 10], 100)
      assert not candidate([1, 20, 4, 10], 5)
      assert candidate([1, 20, 4, 10], 21)
      assert candidate([1, 20, 4, 10], 22)
      assert candidate([1, 8, 4, 10], 11)
      assert not candidate([1, 8, 4, 10], 10)

---
task_id: HumanEval/53
prompt: |2


  def add(x: int, y: int):
      """Add two numbers x and y
      >>> add(2, 3)
      5
      >>> add(5, 7)
      12
      """
entry_point: add
canonical_solution: |2
      return x + y
test: |2+


  METADATA = {}


  def check(candidate):
      import random

      assert candidate(0, 1) == 1
      assert candidate(1, 0) == 1
      assert candidate(2, 3) == 5
      assert candidate(5, 7) == 12
      assert candidate(7, 5) == 12

      for i in range(100):
          x, y = random.randint(0, 1000), random.randint(0, 1000)
          assert candidate(x, y) == x + y

---
task_id: HumanEval/54
prompt: |2


  def same_chars(s0: str, s1: str):
      """
      Check if two words have the same characters.
      >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')
      True
      >>> same_chars('abcd', 'dddddddabc')
      True
      >>> same_chars('dddddddabc', 'abcd')
      True
      >>> same_chars('eabcd', 'dddddddabc')
      False
      >>> same_chars('abcd', 'dddddddabce')
      False
      >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')
      False
      """
entry_point: same_chars
canonical_solution: |2
      return set(s0) == set(s1)
test: |2+


  METADATA = {}


  def check(candidate):
      assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True
      assert candidate('abcd', 'dddddddabc') == True
      assert candidate('dddddddabc', 'abcd') == True
      assert candidate('eabcd', 'dddddddabc') == False
      assert candidate('abcd', 'dddddddabcf') == False
      assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False
      assert candidate('aabb', 'aaccc') == False

---
task_id: HumanEval/55
prompt: |2


  def fib(n: int):
      """Return n-th Fibonacci number.
      >>> fib(10)
      55
      >>> fib(1)
      1
      >>> fib(8)
      21
      """
entry_point: fib
canonical_solution: |2
      if n == 0:
          return 0
      if n == 1:
          return 1
      return fib(n - 1) + fib(n - 2)
test: |2+


  METADATA = {}


  def check(candidate):
      assert candidate(10) == 55
      assert candidate(1) == 1
      assert candidate(8) == 21
      assert candidate(11) == 89
      assert candidate(12) == 144

---
task_id: HumanEval/56
prompt: |2


  def correct_bracketing(brackets: str):
      """ brackets is a string of "<" and ">".
      return True if every opening bracket has a corresponding closing bracket.

      >>> correct_bracketing("<")
      False
      >>> correct_bracketing("<>")
      True
      >>> correct_bracketing("<<><>>")
      True
      >>> correct_bracketing("><<>")
      False
      """
entry_point: correct_bracketing
canonical_solution: |2
      depth = 0
      for b in brackets:
          if b == "<":
              depth += 1
          else:
              depth -= 1
          if depth < 0:
              return False
      return depth == 0
test: |2+


  METADATA = {}


  def check(candidate):
      assert candidate("<>")
      assert candidate("<<><>>")
      assert candidate("<><><<><>><>")
      assert candidate("<><><<<><><>><>><<><><<>>>")
      assert not candidate("<<<><>>>>")
      assert not candidate("><<>")
      assert not candidate("<")
      assert not candidate("<<<<")
      assert not candidate(">")
      assert not candidate("<<>")
      assert not candidate("<><><<><>><>><<>")
      assert not candidate("<><><<><>><>>><>")

---
task_id: HumanEval/57
prompt: |2


  def monotonic(l: list):
      """Return True is list elements are monotonically increasing or decreasing.
      >>> monotonic([1, 2, 4, 20])
      True
      >>> monotonic([1, 20, 4, 10])
      False
      >>> monotonic([4, 1, 0, -10])
      True
      """
entry_point: monotonic
canonical_solution: |2
      if l == sorted(l) or l == sorted(l, reverse=True):
          return True
      return False
test: |2+


  METADATA = {}


  def check(candidate):
      assert candidate([1, 2, 4, 10]) == True
      assert candidate([1, 2, 4, 20]) == True
      assert candidate([1, 20, 4, 10]) == False
      assert candidate([4, 1, 0, -10]) == True
      assert candidate([4, 1, 1, 0]) == True
      assert candidate([1, 2, 3, 2, 5, 60]) == False
      assert candidate([1, 2, 3, 4, 5, 60]) == True
      assert candidate([9, 9, 9, 9]) == True

---
task_id: HumanEval/58
prompt: |2


  def common(l1: list, l2: list):
      """Return sorted unique common elements for two lists.
      >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])
      [1, 5, 653]
      >>> common([5, 3, 2, 8], [3, 2])
      [2, 3]

      """
entry_point: common
canonical_solution: |2
      ret = set()
      for e1 in l1:
          for e2 in l2:
              if e1 == e2:
                  ret.add(e1)
      return sorted(list(ret))
test: |2+


  METADATA = {}


  def check(candidate):
      assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]
      assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]
      assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]
      assert candidate([4, 3, 2, 8], []) == []

---
task_id: HumanEval/59
prompt: |2


  def largest_prime_factor(n: int):
      """Return the largest prime factor of n. Assume n > 1 and is not a prime.
      >>> largest_prime_factor(13195)
      29
      >>> largest_prime_factor(2048)
      2
      """
entry_point: largest_prime_factor
canonical_solution: |2
      def is_prime(k):
          if k < 2:
              return False
          for i in range(2, k - 1):
              if k % i == 0:
                  return False
          return True
      largest = 1
      for j in range(2, n + 1):
          if n % j == 0 and is_prime(j):
              largest = max(largest, j)
      return largest
test: |2+


  METADATA = {}


  def check(candidate):
      assert candidate(15) == 5
      assert candidate(27) == 3
      assert candidate(63) == 7
      assert candidate(330) == 11
      assert candidate(13195) == 29

---
task_id: HumanEval/60
prompt: |2


  def sum_to_n(n: int):
      """sum_to_n is a function that sums numbers from 1 to n.
      >>> sum_to_n(30)
      465
      >>> sum_to_n(100)
      5050
      >>> sum_to_n(5)
      15
      >>> sum_to_n(10)
      55
      >>> sum_to_n(1)
      1
      """
entry_point: sum_to_n
canonical_solution: |2
      return sum(range(n + 1))
test: |2+


  METADATA = {}


  def check(candidate):
      assert candidate(1) == 1
      assert candidate(6) == 21
      assert candidate(11) == 66
      assert candidate(30) == 465
      assert candidate(100) == 5050

---
task_id: HumanEval/61
prompt: |2


  def correct_bracketing(brackets: str):
      """ brackets is a string of "(" and ")".
      return True if every opening bracket has a corresponding closing bracket.

      >>> correct_bracketing("(")
      False
      >>> correct_bracketing("()")
      True
      >>> correct_bracketing("(()())")
      True
      >>> correct_bracketing(")(()")
      False
      """
entry_point: correct_bracketing
canonical_solution: |2
      depth = 0
      for b in brackets:
          if b == "(":
              depth += 1
          else:
              depth -= 1
          if depth < 0:
              return False
      return depth == 0
test: |2+


  METADATA = {}


  def check(candidate):
      assert candidate("()")
      assert candidate("(()())")
      assert candidate("()()(()())()")
      assert candidate("()()((()()())())(()()(()))")
      assert not candidate("((()())))")
      assert not candidate(")(()")
      assert not candidate("(")
      assert not candidate("((((")
      assert not candidate(")")
      assert not candidate("(()")
      assert not candidate("()()(()())())(()")
      assert not candidate("()()(()())()))()")

---
task_id: HumanEval/62
prompt: |2


  def derivative(xs: list):
      """ xs represent coefficients of a polynomial.
      xs[0] + xs[1] * x + xs[2] * x^2 + ....
       Return derivative of this polynomial in the same form.
      >>> derivative([3, 1, 2, 4, 5])
      [1, 4, 12, 20]
      >>> derivative([1, 2, 3])
      [2, 6]
      """
entry_point: derivative
canonical_solution: |2
      return [(i * x) for i, x in enumerate(xs)][1:]
test: |2+


  METADATA = {}


  def check(candidate):
      assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]
      assert candidate([1, 2, 3]) == [2, 6]
      assert candidate([3, 2, 1]) == [2, 2]
      assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]
      assert candidate([1]) == []

---
task_id: HumanEval/63
prompt: |2


  def fibfib(n: int):
      """The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:
      fibfib(0) == 0
      fibfib(1) == 0
      fibfib(2) == 1
      fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).
      Please write a function to efficiently compute the n-th element of the fibfib number sequence.
      >>> fibfib(1)
      0
      >>> fibfib(5)
      4
      >>> fibfib(8)
      24
      """
entry_point: fibfib
canonical_solution: |2
      if n == 0:
          return 0
      if n == 1:
          return 0
      if n == 2:
          return 1
      return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)
test: |2+


  METADATA = {}


  def check(candidate):
      assert candidate(2) == 1
      assert candidate(1) == 0
      assert candidate(5) == 4
      assert candidate(8) == 24
      assert candidate(10) == 81
      assert candidate(12) == 274
      assert candidate(14) == 927

---
task_id: HumanEval/64
prompt: |2

  FIX = """
  Add more test cases.
  """

  def vowels_count(s):
      """Write a function vowels_count which takes a string representing
      a word as input and returns the number of vowels in the string.
      Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a
      vowel, but only when it is at the end of the given word.

      Example:
      >>> vowels_count("abcde")
      2
      >>> vowels_count("ACEDY")
      3
      """
entry_point: vowels_count
canonical_solution: |2
      vowels = "aeiouAEIOU"
      n_vowels = sum(c in vowels for c in s)
      if s[-1] == 'y' or s[-1] == 'Y':
          n_vowels += 1
      return n_vowels
test: |+
  def check(candidate):

      # Check some simple cases
      assert candidate("abcde") == 2, "Test 1"
      assert candidate("Alone") == 3, "Test 2"
      assert candidate("key") == 2, "Test 3"
      assert candidate("bye") == 1, "Test 4"
      assert candidate("keY") == 2, "Test 5"
      assert candidate("bYe") == 1, "Test 6"
      assert candidate("ACEDY") == 3, "Test 7"

      # Check some edge cases that are easy to work out by hand.
      assert True, "This prints if this assert fails 2 (also good for debugging!)"

---
task_id: HumanEval/65
prompt: |2

  def circular_shift(x, shift):
      """Circular shift the digits of the integer x, shift the digits right by shift
      and return the result as a string.
      If shift > number of digits, return digits reversed.
      >>> circular_shift(12, 1)
      "21"
      >>> circular_shift(12, 2)
      "12"
      """
entry_point: circular_shift
canonical_solution: |2
      s = str(x)
      if shift > len(s):
          return s[::-1]
      else:
          return s[len(s) - shift:] + s[:len(s) - shift]
test: |+
  def check(candidate):

      # Check some simple cases
      assert candidate(100, 2) == "001"
      assert candidate(12, 2) == "12"
      assert candidate(97, 8) == "79"
      assert candidate(12, 1) == "21", "This prints if this assert fails 1 (good for debugging!)"

      # Check some edge cases that are easy to work out by hand.
      assert candidate(11, 101) == "11", "This prints if this assert fails 2 (also good for debugging!)"

---
task_id: HumanEval/66
prompt: |2

  def digitSum(s):
      """Task
      Write a function that takes a string as input and returns the sum of the upper characters only'
      ASCII codes.

      Examples:
          digitSum("") => 0
          digitSum("abAB") => 131
          digitSum("abcCd") => 67
          digitSum("helloE") => 69
          digitSum("woArBld") => 131
          digitSum("aAaaaXa") => 153
      """
entry_point: digitSum
canonical_solution: |2
      if s == "": return 0
      return sum(ord(char) if char.isupper() else 0 for char in s)
test: |+
  def check(candidate):

      # Check some simple cases
      assert True, "This prints if this assert fails 1 (good for debugging!)"
      assert candidate("") == 0, "Error"
      assert candidate("abAB") == 131, "Error"
      assert candidate("abcCd") == 67, "Error"
      assert candidate("helloE") == 69, "Error"
      assert candidate("woArBld") == 131, "Error"
      assert candidate("aAaaaXa") == 153, "Error"

      # Check some edge cases that are easy to work out by hand.
      assert True, "This prints if this assert fails 2 (also good for debugging!)"
      assert candidate(" How are yOu?") == 151, "Error"
      assert candidate("You arE Very Smart") == 327, "Error"

---
task_id: HumanEval/67
prompt: "\ndef fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n"
entry_point: fruit_distribution
canonical_solution: |2
      lis = list()
      for i in s.split(' '):
          if i.isdigit():
              lis.append(int(i))
      return n - sum(lis)
test: |
  def check(candidate):

      # Check some simple cases
      assert candidate("5 apples and 6 oranges",19) == 8
      assert candidate("5 apples and 6 oranges",21) == 10
      assert candidate("0 apples and 1 oranges",3) == 2
      assert candidate("1 apples and 0 oranges",3) == 2
      assert candidate("2 apples and 3 oranges",100) == 95
      assert candidate("2 apples and 3 oranges",5) == 0
      assert candidate("1 apples and 100 oranges",120) == 19
---
task_id: HumanEval/68
prompt: "\ndef pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n"
entry_point: pluck
canonical_solution: |2
      if(len(arr) == 0): return []
      evens = list(filter(lambda x: x%2 == 0, arr))
      if(evens == []): return []
      return [min(evens), arr.index(min(evens))]
test: |+
  def check(candidate):

      # Check some simple cases
      assert True, "This prints if this assert fails 1 (good for debugging!)"
      assert candidate([4,2,3]) == [2, 1], "Error"
      assert candidate([1,2,3]) == [2, 1], "Error"
      assert candidate([]) == [], "Error"
      assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], "Error"

      # Check some edge cases that are easy to work out by hand.
      assert True, "This prints if this assert fails 2 (also good for debugging!)"
      assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], "Error"
      assert candidate([5, 4, 8, 4 ,8]) == [4, 1], "Error"
      assert candidate([7, 6, 7, 1]) == [6, 1], "Error"
      assert candidate([7, 9, 7, 1]) == [], "Error"

---
task_id: HumanEval/69
prompt: "\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n"
entry_point: search
canonical_solution: "    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n"
test: |+
  def check(candidate):

      # manually generated tests
      assert candidate([5, 5, 5, 5, 1]) == 1
      assert candidate([4, 1, 4, 1, 4, 4]) == 4
      assert candidate([3, 3]) == -1
      assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8
      assert candidate([2, 3, 3, 2, 2]) == 2

      # automatically generated tests
      assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1
      assert candidate([3, 2, 8, 2]) == 2
      assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1
      assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1
      assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1
      assert candidate([1, 9, 10, 1, 3]) == 1
      assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5
      assert candidate([1]) == 1
      assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4
      assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2
      assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1
      assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4
      assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4
      assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2
      assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1
      assert candidate([10]) == -1
      assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2
      assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1
      assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1
      assert candidate([3, 10, 10, 9, 2]) == -1

---
task_id: HumanEval/70
prompt: |2

  def strange_sort_list(lst):
      '''
      Given list of integers, return list in strange order.
      Strange sorting, is when you start with the minimum value,
      then maximum of the remaining integers, then minimum and so on.

      Examples:
      strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]
      strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]
      strange_sort_list([]) == []
      '''
entry_point: strange_sort_list
canonical_solution: |2
      res, switch = [], True
      while lst:
          res.append(min(lst) if switch else max(lst))
          lst.remove(res[-1])
          switch = not switch
      return res
test: |+
  def check(candidate):

      # Check some simple cases
      assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]
      assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]
      assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]
      assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]
      assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]
      assert candidate([]) == []
      assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]
      assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]
      assert candidate([111111]) == [111111]

      # Check some edge cases that are easy to work out by hand.
      assert True

---
task_id: HumanEval/71
prompt: "\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n"
entry_point: triangle_area
canonical_solution: "    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n"
test: |+
  def check(candidate):

      # Check some simple cases
      assert candidate(3, 4, 5) == 6.00, "This prints if this assert fails 1 (good for debugging!)"
      assert candidate(1, 2, 10) == -1
      assert candidate(4, 8, 5) == 8.18
      assert candidate(2, 2, 2) == 1.73
      assert candidate(1, 2, 3) == -1
      assert candidate(10, 5, 7) == 16.25
      assert candidate(2, 6, 3) == -1

      # Check some edge cases that are easy to work out by hand.
      assert candidate(1, 1, 1) == 0.43, "This prints if this assert fails 2 (also good for debugging!)"
      assert candidate(2, 2, 10) == -1

---
task_id: HumanEval/72
prompt: "\ndef will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) ➞ False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) ➞ False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) ➞ True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) ➞ True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n"
entry_point: will_it_fly
canonical_solution: |2
      if sum(q) > w:
          return False

      i, j = 0, len(q)-1
      while i<j:
          if q[i] != q[j]:
              return False
          i+=1
          j-=1
      return True
test: |+
  def check(candidate):

      # Check some simple cases
      assert candidate([3, 2, 3], 9) is True
      assert candidate([1, 2], 5) is False
      assert candidate([3], 5) is True
      assert candidate([3, 2, 3], 1) is False


      # Check some edge cases that are easy to work out by hand.
      assert candidate([1, 2, 3], 6) is False
      assert candidate([5], 5) is True

---
task_id: HumanEval/73
prompt: |2

  def smallest_change(arr):
      """
      Given an array arr of integers, find the minimum number of elements that
      need to be changed to make the array palindromic. A palindromic array is an array that
      is read the same backwards and forwards. In one change, you can change one element to any other element.

      For example:
      smallest_change([1,2,3,5,4,7,9,6]) == 4
      smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1
      smallest_change([1, 2, 3, 2, 1]) == 0
      """
entry_point: smallest_change
canonical_solution: |2
      ans = 0
      for i in range(len(arr) // 2):
          if arr[i] != arr[len(arr) - i - 1]:
              ans += 1
      return ans
test: |+
  def check(candidate):

      # Check some simple cases
      assert candidate([1,2,3,5,4,7,9,6]) == 4
      assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1
      assert candidate([1, 4, 2]) == 1
      assert candidate([1, 4, 4, 2]) == 1

      # Check some edge cases that are easy to work out by hand.
      assert candidate([1, 2, 3, 2, 1]) == 0
      assert candidate([3, 1, 1, 3]) == 0
      assert candidate([1]) == 0
      assert candidate([0, 1]) == 1

---
task_id: HumanEval/74
prompt: "\ndef total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) ➞ []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n    '''\n"
entry_point: total_match
canonical_solution: "    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n"
test: |+
  def check(candidate):

      # Check some simple cases
      assert True, "This prints if this assert fails 1 (good for debugging!)"
      assert candidate([], []) == []
      assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']
      assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']
      assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']
      assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']
      assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']
      assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']


      # Check some edge cases that are easy to work out by hand.
      assert True, "This prints if this assert fails 2 (also good for debugging!)"
      assert candidate([], ['this']) == []
      assert candidate(['this'], []) == []

---
task_id: HumanEval/75
prompt: "\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n"
entry_point: is_multiply_prime
canonical_solution: |2
      def is_prime(n):
          for j in range(2,n):
              if n%j == 0:
                  return False
          return True

      for i in range(2,101):
          if not is_prime(i): continue
          for j in range(2,101):
              if not is_prime(j): continue
              for k in range(2,101):
                  if not is_prime(k): continue
                  if i*j*k == a: return True
      return False
test: |+
  def check(candidate):

      assert candidate(5) == False
      assert candidate(30) == True
      assert candidate(8) == True
      assert candidate(10) == False
      assert candidate(125) == True
      assert candidate(3 * 5 * 7) == True
      assert candidate(3 * 6 * 7) == False
      assert candidate(9 * 9 * 9) == False
      assert candidate(11 * 9 * 9) == False
      assert candidate(11 * 13 * 7) == True

---
task_id: HumanEval/76
prompt: |2

  def is_simple_power(x, n):
      """Your task is to write a function that returns true if a number x is a simple
      power of n and false in other cases.
      x is a simple power of n if n**int=x
      For example:
      is_simple_power(1, 4) => true
      is_simple_power(2, 2) => true
      is_simple_power(8, 2) => true
      is_simple_power(3, 2) => false
      is_simple_power(3, 1) => false
      is_simple_power(5, 3) => false
      """
entry_point: is_simple_power
canonical_solution: "    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < x): \n        power = power * n \n    return (power == x) \n"
test: |+
  def check(candidate):

      # Check some simple cases
      assert candidate(16, 2)== True, "This prints if this assert fails 1 (good for debugging!)"
      assert candidate(143214, 16)== False, "This prints if this assert fails 1 (good for debugging!)"
      assert candidate(4, 2)==True, "This prints if this assert fails 1 (good for debugging!)"
      assert candidate(9, 3)==True, "This prints if this assert fails 1 (good for debugging!)"
      assert candidate(16, 4)==True, "This prints if this assert fails 1 (good for debugging!)"
      assert candidate(24, 2)==False, "This prints if this assert fails 1 (good for debugging!)"
      assert candidate(128, 4)==False, "This prints if this assert fails 1 (good for debugging!)"
      assert candidate(12, 6)==False, "This prints if this assert fails 1 (good for debugging!)"

      # Check some edge cases that are easy to work out by hand.
      assert candidate(1, 1)==True, "This prints if this assert fails 2 (also good for debugging!)"
      assert candidate(1, 12)==True, "This prints if this assert fails 2 (also good for debugging!)"

---
task_id: HumanEval/77
prompt: "\ndef iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n"
entry_point: iscube
canonical_solution: |2
      a = abs(a)
      return int(round(a ** (1. / 3))) ** 3 == a
test: |+
  def check(candidate):

      # Check some simple cases
      assert candidate(1) == True, "First test error: " + str(candidate(1))
      assert candidate(2) == False, "Second test error: " + str(candidate(2))
      assert candidate(-1) == True, "Third test error: " + str(candidate(-1))
      assert candidate(64) == True, "Fourth test error: " + str(candidate(64))
      assert candidate(180) == False, "Fifth test error: " + str(candidate(180))
      assert candidate(1000) == True, "Sixth test error: " + str(candidate(1000))


      # Check some edge cases that are easy to work out by hand.
      assert candidate(0) == True, "1st edge test error: " + str(candidate(0))
      assert candidate(1729) == False, "2nd edge test error: " + str(candidate(1728))

---
task_id: HumanEval/78
prompt: "\ndef hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n"
entry_point: hex_key
canonical_solution: |2
      primes = ('2', '3', '5', '7', 'B', 'D')
      total = 0
      for i in range(0, len(num)):
          if num[i] in primes:
              total += 1
      return total
test: "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AB\") == 1, \"First test error: \" + str(candidate(\"AB\"))      \n    assert candidate(\"1077E\") == 2, \"Second test error: \" + str(candidate(\"1077E\"))  \n    assert candidate(\"ABED1A33\") == 4, \"Third test error: \" + str(candidate(\"ABED1A33\"))      \n    assert candidate(\"2020\") == 2, \"Fourth test error: \" + str(candidate(\"2020\"))  \n    assert candidate(\"123456789ABCDEF0\") == 6, \"Fifth test error: \" + str(candidate(\"123456789ABCDEF0\"))      \n    assert candidate(\"112233445566778899AABBCCDDEEFF00\") == 12, \"Sixth test error: \" + str(candidate(\"112233445566778899AABBCCDDEEFF00\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([]) == 0\n\n"
---
task_id: HumanEval/79
prompt: |2

  def decimal_to_binary(decimal):
      """You will be given a number in decimal form and your task is to convert it to
      binary format. The function should return a string, with each character representing a binary
      number. Each character in the string will be '0' or '1'.

      There will be an extra couple of characters 'db' at the beginning and at the end of the string.
      The extra characters are there to help with the format.

      Examples:
      decimal_to_binary(15)   # returns "db1111db"
      decimal_to_binary(32)   # returns "db100000db"
      """
entry_point: decimal_to_binary
canonical_solution: |2
      return "db" + bin(decimal)[2:] + "db"
test: |+
  def check(candidate):

      # Check some simple cases
      assert candidate(0) == "db0db"
      assert candidate(32) == "db100000db"
      assert candidate(103) == "db1100111db"
      assert candidate(15) == "db1111db", "This prints if this assert fails 1 (good for debugging!)"

      # Check some edge cases that are easy to work out by hand.
      assert True, "This prints if this assert fails 2 (also good for debugging!)"

---
task_id: HumanEval/80
prompt: |2

  def is_happy(s):
      """You are given a string s.
      Your task is to check if the string is happy or not.
      A string is happy if its length is at least 3 and every 3 consecutive letters are distinct
      For example:
      is_happy(a) => False
      is_happy(aa) => False
      is_happy(abcd) => True
      is_happy(aabb) => False
      is_happy(adb) => True
      is_happy(xyy) => False
      """
entry_point: is_happy
canonical_solution: "    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n"
test: |
  def check(candidate):

      # Check some simple cases
      assert candidate("a") == False , "a"
      assert candidate("aa") == False , "aa"
      assert candidate("abcd") == True , "abcd"
      assert candidate("aabb") == False , "aabb"
      assert candidate("adb") == True , "adb"
      assert candidate("xyy") == False , "xyy"
      assert candidate("iopaxpoi") == True , "iopaxpoi"
      assert candidate("iopaxioi") == False , "iopaxioi"
---
task_id: HumanEval/81
prompt: "\ndef numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n"
entry_point: numerical_letter_grade
canonical_solution: "\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n"
test: |+
  def check(candidate):

      # Check some simple cases
      assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']
      assert candidate([1.2]) == ['D+']
      assert candidate([0.5]) == ['D-']
      assert candidate([0.0]) == ['E']
      assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']
      assert candidate([0, 0.7]) == ['E', 'D-']

      # Check some edge cases that are easy to work out by hand.
      assert True

---
task_id: HumanEval/82
prompt: |2

  def prime_length(string):
      """Write a function that takes a string and returns True if the string
      length is a prime number or False otherwise
      Examples
      prime_length('Hello') == True
      prime_length('abcdcba') == True
      prime_length('kittens') == True
      prime_length('orange') == False
      """
entry_point: prime_length
canonical_solution: |2
      l = len(string)
      if l == 0 or l == 1:
          return False
      for i in range(2, l):
          if l % i == 0:
              return False
      return True
test: |+
  def check(candidate):

      # Check some simple cases
      assert candidate('Hello') == True
      assert candidate('abcdcba') == True
      assert candidate('kittens') == True
      assert candidate('orange') == False
      assert candidate('wow') == True
      assert candidate('world') == True
      assert candidate('MadaM') == True
      assert candidate('Wow') == True
      assert candidate('') == False
      assert candidate('HI') == True
      assert candidate('go') == True
      assert candidate('gogo') == False
      assert candidate('aaaaaaaaaaaaaaa') == False

      # Check some edge cases that are easy to work out by hand.
      assert candidate('Madam') == True
      assert candidate('M') == False
      assert candidate('0') == False

---
task_id: HumanEval/83
prompt: |2

  def starts_one_ends(n):
      """
      Given a positive integer n, return the count of the numbers of n-digit
      positive integers that start or end with 1.
      """
entry_point: starts_one_ends
canonical_solution: |2
      if n == 1: return 1
      return 18 * (10 ** (n - 2))
test: |+
  def check(candidate):

      # Check some simple cases
      assert True, "This prints if this assert fails 1 (good for debugging!)"
      assert candidate(1) == 1
      assert candidate(2) == 18
      assert candidate(3) == 180
      assert candidate(4) == 1800
      assert candidate(5) == 18000

      # Check some edge cases that are easy to work out by hand.
      assert True, "This prints if this assert fails 2 (also good for debugging!)"

---
task_id: HumanEval/84
prompt: "\ndef solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 ≤ N ≤ 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n"
entry_point: solve
canonical_solution: |2
      return bin(sum(int(i) for i in str(N)))[2:]
test: |+
  def check(candidate):

      # Check some simple cases
      assert True, "This prints if this assert fails 1 (good for debugging!)"
      assert candidate(1000) == "1", "Error"
      assert candidate(150) == "110", "Error"
      assert candidate(147) == "1100", "Error"

      # Check some edge cases that are easy to work out by hand.
      assert True, "This prints if this assert fails 2 (also good for debugging!)"
      assert candidate(333) == "1001", "Error"
      assert candidate(963) == "10010", "Error"

---
task_id: HumanEval/85
prompt: "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n"
entry_point: add
canonical_solution: |2
      return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])
test: "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\n    # Check some edge cases that are easy to work out by hand.\n    \n"
---
task_id: HumanEval/86
prompt: |2

  def anti_shuffle(s):
      """
      Write a function that takes a string and returns an ordered version of it.
      Ordered version of string, is a string where all words (separated by space)
      are replaced by a new word where all the characters arranged in
      ascending order based on ascii value.
      Note: You should keep the order of words and blank spaces in the sentence.

      For example:
      anti_shuffle('Hi') returns 'Hi'
      anti_shuffle('hello') returns 'ehllo'
      anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'
      """
entry_point: anti_shuffle
canonical_solution: |2
      return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])
test: |+
  def check(candidate):

      # Check some simple cases
      assert candidate('Hi') == 'Hi'
      assert candidate('hello') == 'ehllo'
      assert candidate('number') == 'bemnru'
      assert candidate('abcd') == 'abcd'
      assert candidate('Hello World!!!') == 'Hello !!!Wdlor'
      assert candidate('') == ''
      assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'
      # Check some edge cases that are easy to work out by hand.
      assert True

---
task_id: HumanEval/87
prompt: "\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n"
entry_point: get_row
canonical_solution: |2
      coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]
      return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])
test: |+
  def check(candidate):

      # Check some simple cases
      assert candidate([
          [1,2,3,4,5,6],
          [1,2,3,4,1,6],
          [1,2,3,4,5,1]
      ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
      assert candidate([
          [1,2,3,4,5,6],
          [1,2,3,4,5,6],
          [1,2,3,4,5,6],
          [1,2,3,4,5,6],
          [1,2,3,4,5,6],
          [1,2,3,4,5,6]
      ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]
      assert candidate([
          [1,2,3,4,5,6],
          [1,2,3,4,5,6],
          [1,1,3,4,5,6],
          [1,2,1,4,5,6],
          [1,2,3,1,5,6],
          [1,2,3,4,1,6],
          [1,2,3,4,5,1]
      ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]
      assert candidate([], 1) == []
      assert candidate([[1]], 2) == []
      assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]

      # Check some edge cases that are easy to work out by hand.
      assert True

---
task_id: HumanEval/88
prompt: |2

  def sort_array(array):
      """
      Given an array of non-negative integers, return a copy of the given array after sorting,
      you will sort the given array in ascending order if the sum( first index value, last index value) is odd,
      or sort it in descending order if the sum( first index value, last index value) is even.

      Note:
      * don't change the given array.

      Examples:
      * sort_array([]) => []
      * sort_array([5]) => [5]
      * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]
      * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]
      """
entry_point: sort_array
canonical_solution: "    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n"
test: |+
  def check(candidate):

      # Check some simple cases
      assert True, "This prints if this assert fails 1 (good for debugging!)"
      assert candidate([]) == [], "Error"
      assert candidate([5]) == [5], "Error"
      assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], "Error"
      assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], "Error"

      # Check some edge cases that are easy to work out by hand.
      assert True, "This prints if this assert fails 2 (also good for debugging!)"
      assert candidate([2, 1]) == [1, 2], "Error"
      assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], "Error"
      assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], "Error"

---
task_id: HumanEval/89
prompt: "\ndef encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n"
entry_point: encrypt
canonical_solution: |2
      d = 'abcdefghijklmnopqrstuvwxyz'
      out = ''
      for c in s:
          if c in d:
              out += d[(d.index(c)+2*2) % 26]
          else:
              out += c
      return out
test: |+
  def check(candidate):

      # Check some simple cases
      assert candidate('hi') == 'lm', "This prints if this assert fails 1 (good for debugging!)"
      assert candidate('asdfghjkl') == 'ewhjklnop', "This prints if this assert fails 1 (good for debugging!)"
      assert candidate('gf') == 'kj', "This prints if this assert fails 1 (good for debugging!)"
      assert candidate('et') == 'ix', "This prints if this assert fails 1 (good for debugging!)"

      assert candidate('faewfawefaewg')=='jeiajeaijeiak', "This prints if this assert fails 1 (good for debugging!)"
      assert candidate('hellomyfriend')=='lippsqcjvmirh', "This prints if this assert fails 2 (good for debugging!)"
      assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', "This prints if this assert fails 3 (good for debugging!)"

      # Check some edge cases that are easy to work out by hand.
      assert candidate('a')=='e', "This prints if this assert fails 2 (also good for debugging!)"

---
task_id: HumanEval/90
prompt: "\ndef next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n"
entry_point: next_smallest
canonical_solution: |2
      lst = sorted(set(lst))
      return None if len(lst) < 2 else lst[1]
test: |+
  def check(candidate):

      # Check some simple cases
      assert candidate([1, 2, 3, 4, 5]) == 2
      assert candidate([5, 1, 4, 3, 2]) == 2
      assert candidate([]) == None
      assert candidate([1, 1]) == None
      assert candidate([1,1,1,1,0]) == 1
      assert candidate([1, 0**0]) == None
      assert candidate([-35, 34, 12, -45]) == -35

      # Check some edge cases that are easy to work out by hand.
      assert True

---
task_id: HumanEval/91
prompt: "\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n"
entry_point: is_bored
canonical_solution: |2
      import re
      sentences = re.split(r'[.?!]\s*', S)
      return sum(sentence[0:2] == 'I ' for sentence in sentences)
test: |+
  def check(candidate):

      # Check some simple cases
      assert candidate("Hello world") == 0, "Test 1"
      assert candidate("Is the sky blue?") == 0, "Test 2"
      assert candidate("I love It !") == 1, "Test 3"
      assert candidate("bIt") == 0, "Test 4"
      assert candidate("I feel good today. I will be productive. will kill It") == 2, "Test 5"
      assert candidate("You and I are going for a walk") == 0, "Test 6"

      # Check some edge cases that are easy to work out by hand.
      assert True, "This prints if this assert fails 2 (also good for debugging!)"

---
task_id: HumanEval/92
prompt: "\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) ➞ True\n    \n    any_int(3, 2, 2) ➞ False\n\n    any_int(3, -2, 1) ➞ True\n    \n    any_int(3.6, -2.2, 2) ➞ False\n  \n\n    \n    '''\n"
entry_point: any_int
canonical_solution: "    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n"
test: |+
  def check(candidate):

      # Check some simple cases
      assert candidate(2, 3, 1)==True, "This prints if this assert fails 1 (good for debugging!)"
      assert candidate(2.5, 2, 3)==False, "This prints if this assert fails 2 (good for debugging!)"
      assert candidate(1.5, 5, 3.5)==False, "This prints if this assert fails 3 (good for debugging!)"
      assert candidate(2, 6, 2)==False, "This prints if this assert fails 4 (good for debugging!)"
      assert candidate(4, 2, 2)==True, "This prints if this assert fails 5 (good for debugging!)"
      assert candidate(2.2, 2.2, 2.2)==False, "This prints if this assert fails 6 (good for debugging!)"
      assert candidate(-4, 6, 2)==True, "This prints if this assert fails 7 (good for debugging!)"

      # Check some edge cases that are easy to work out by hand.
      assert candidate(2,1,1)==True, "This prints if this assert fails 8 (also good for debugging!)"
      assert candidate(3,4,7)==True, "This prints if this assert fails 9 (also good for debugging!)"
      assert candidate(3.0,4,7)==False, "This prints if this assert fails 10 (also good for debugging!)"

---
task_id: HumanEval/93
prompt: "\ndef encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n"
entry_point: encode
canonical_solution: |2
      vowels = "aeiouAEIOU"
      vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])
      message = message.swapcase()
      return ''.join([vowels_replace[i] if i in vowels else i for i in message])
test: "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('TEST') == 'tgst', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('Mudasir') == 'mWDCSKR', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('YES') == 'ygs', \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"I DoNt KnOw WhAt tO WrItE\") == 'k dQnT kNqW wHcT Tq wRkTg', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"
---
task_id: HumanEval/94
prompt: |2


  def skjkasdkd(lst):
      """You are given a list of integers.
      You need to find the largest prime value and return the sum of its digits.

      Examples:
      For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10
      For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25
      For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13
      For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11
      For lst = [0,81,12,3,1,21] the output should be 3
      For lst = [0,8,1,2,1,7] the output should be 7
      """
entry_point: skjkasdkd
canonical_solution: |2+
      def isPrime(n):
          for i in range(2,int(n**0.5)+1):
              if n%i==0:
                  return False

          return True
      maxx = 0
      i = 0
      while i < len(lst):
          if(lst[i] > maxx and isPrime(lst[i])):
              maxx = lst[i]
          i+=1
      result = sum(int(digit) for digit in str(maxx))
      return result

test: "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, \"This prints if this assert fails 3 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, \"This prints if this assert fails 4 (also good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,81,12,3,1,21]) == 3, \"This prints if this assert fails 5 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,8,1,2,1,7]) == 7, \"This prints if this assert fails 6 (also good for debugging!)\"\n\n    assert candidate([8191]) == 19, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate([8191, 123456, 127, 7]) == 19, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate([127, 97, 8192]) == 10, \"This prints if this assert fails 9 (also good for debugging!)\"\n"
---
task_id: HumanEval/95
prompt: "\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n"
entry_point: check_dict_case
canonical_solution: "    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n"
test: "def check(candidate):\n\n    # Check some simple cases\n    assert candidate({\"p\":\"pineapple\", \"b\":\"banana\"}) == True, \"First test error: \" + str(candidate({\"p\":\"pineapple\", \"b\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}) == False, \"Second test error: \" + str(candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}) == False, \"Third test error: \" + str(candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}))\n    assert candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) == False, \"Fourth test error: \" + str(candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\n    assert candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) == True, \"Fifth test error: \" + str(candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))      \n    assert candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }) == True, \"Fourth test error: \" + str(candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate({}) == False, \"1st edge test error: \" + str(candidate({}))\n\n"
---
task_id: HumanEval/96
prompt: |2

  def count_up_to(n):
      """Implement a function that takes an non-negative integer and returns an array of the first n
      integers that are prime numbers and less than n.
      for example:
      count_up_to(5) => [2,3]
      count_up_to(11) => [2,3,5,7]
      count_up_to(0) => []
      count_up_to(20) => [2,3,5,7,11,13,17,19]
      count_up_to(1) => []
      count_up_to(18) => [2,3,5,7,11,13,17]
      """
entry_point: count_up_to
canonical_solution: |2+
      primes = []
      for i in range(2, n):
          is_prime = True
          for j in range(2, i):
              if i % j == 0:
                  is_prime = False
                  break
          if is_prime:
              primes.append(i)
      return primes

test: |+
  def check(candidate):

      assert candidate(5) == [2,3]
      assert candidate(6) == [2,3,5]
      assert candidate(7) == [2,3,5]
      assert candidate(10) == [2,3,5,7]
      assert candidate(0) == []
      assert candidate(22) == [2,3,5,7,11,13,17,19]
      assert candidate(1) == []
      assert candidate(18) == [2,3,5,7,11,13,17]
      assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]
      assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]

---
task_id: HumanEval/97
prompt: "\ndef multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n"
entry_point: multiply
canonical_solution: |2
      return abs(a % 10) * abs(b % 10)
test: "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(148, 412) == 16, \"First test error: \" + str(candidate(148, 412))                    \n    assert candidate(19, 28) == 72, \"Second test error: \" + str(candidate(19, 28))           \n    assert candidate(2020, 1851) == 0, \"Third test error: \" + str(candidate(2020, 1851))\n    assert candidate(14,-15) == 20, \"Fourth test error: \" + str(candidate(14,-15))      \n    assert candidate(76, 67) == 42, \"Fifth test error: \" + str(candidate(76, 67))      \n    assert candidate(17, 27) == 49, \"Sixth test error: \" + str(candidate(17, 27))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0, 1) == 0, \"1st edge test error: \" + str(candidate(0, 1))\n    assert candidate(0, 0) == 0, \"2nd edge test error: \" + str(candidate(0, 0))\n\n"
---
task_id: HumanEval/98
prompt: "\ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n"
entry_point: count_upper
canonical_solution: |2
      count = 0
      for i in range(0,len(s),2):
          if s[i] in "AEIOU":
              count += 1
      return count
test: |+
  def check(candidate):

      # Check some simple cases
      assert candidate('aBCdEf')  == 1
      assert candidate('abcdefg') == 0
      assert candidate('dBBE') == 0
      assert candidate('B')  == 0
      assert candidate('U')  == 1
      assert candidate('') == 0
      assert candidate('EEEE') == 2

      # Check some edge cases that are easy to work out by hand.
      assert True

---
task_id: HumanEval/99
prompt: |2

  def closest_integer(value):
      '''
      Create a function that takes a value (string) representing a number
      and returns the closest integer to it. If the number is equidistant
      from two integers, round it away from zero.

      Examples
      >>> closest_integer("10")
      10
      >>> closest_integer("15.3")
      15

      Note:
      Rounding away from zero means that if the given number is equidistant
      from two integers, the one you should return is the one that is the
      farthest from zero. For example closest_integer("14.5") should
      return 15 and closest_integer("-14.5") should return -15.
      '''
entry_point: closest_integer
canonical_solution: |2+
      from math import floor, ceil

      if value.count('.') == 1:
          # remove trailing zeros
          while (value[-1] == '0'):
              value = value[:-1]

      num = float(value)
      if value[-2:] == '.5':
          if num > 0:
              res = ceil(num)
          else:
              res = floor(num)
      elif len(value) > 0:
          res = int(round(num))
      else:
          res = 0

      return res

test: |+
  def check(candidate):

      # Check some simple cases
      assert candidate("10") == 10, "Test 1"
      assert candidate("14.5") == 15, "Test 2"
      assert candidate("-15.5") == -16, "Test 3"
      assert candidate("15.3") == 15, "Test 3"

      # Check some edge cases that are easy to work out by hand.
      assert candidate("0") == 0, "Test 0"

---
task_id: HumanEval/100
prompt: |2

  def make_a_pile(n):
      """
      Given a positive integer n, you have to make a pile of n levels of stones.
      The first level has n stones.
      The number of stones in the next level is:
          - the next odd number if n is odd.
          - the next even number if n is even.
      Return the number of stones in each level in a list, where element at index
      i represents the number of stones in the level (i+1).

      Examples:
      >>> make_a_pile(3)
      [3, 5, 7]
      """
entry_point: make_a_pile
canonical_solution: |2
      return [n + 2*i for i in range(n)]
test: |+
  def check(candidate):

      # Check some simple cases
      assert candidate(3) == [3, 5, 7], "Test 3"
      assert candidate(4) == [4,6,8,10], "Test 4"
      assert candidate(5) == [5, 7, 9, 11, 13]
      assert candidate(6) == [6, 8, 10, 12, 14, 16]
      assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]

      # Check some edge cases that are easy to work out by hand.
      assert True, "This prints if this assert fails 2 (also good for debugging!)"

---
task_id: HumanEval/101
prompt: "\ndef words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n"
entry_point: words_string
canonical_solution: |2
      if not s:
          return []

      s_list = []

      for letter in s:
          if letter == ',':
              s_list.append(' ')
          else:
              s_list.append(letter)

      s_list = "".join(s_list)
      return s_list.split()
test: |+
  def check(candidate):

      # Check some simple cases
      assert True, "This prints if this assert fails 1 (good for debugging!)"
      assert candidate("Hi, my name is John") == ["Hi", "my", "name", "is", "John"]
      assert candidate("One, two, three, four, five, six") == ["One", "two", "three", "four", "five", "six"]
      assert candidate("Hi, my name") == ["Hi", "my", "name"]
      assert candidate("One,, two, three, four, five, six,") == ["One", "two", "three", "four", "five", "six"]

      # Check some edge cases that are easy to work out by hand.
      assert True, "This prints if this assert fails 2 (also good for debugging!)"
      assert candidate("") == []
      assert candidate("ahmed     , gamal") == ["ahmed", "gamal"]

---
task_id: HumanEval/102
prompt: "\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n"
entry_point: choose_num
canonical_solution: |2
      if x > y:
          return -1
      if y % 2 == 0:
          return y
      if x == y:
          return -1
      return y - 1
test: |+
  def check(candidate):

      # Check some simple cases
      assert candidate(12, 15) == 14
      assert candidate(13, 12) == -1
      assert candidate(33, 12354) == 12354
      assert candidate(5234, 5233) == -1
      assert candidate(6, 29) == 28
      assert candidate(27, 10) == -1

      # Check some edge cases that are easy to work out by hand.
      assert candidate(7, 7) == -1
      assert candidate(546, 546) == 546

---
task_id: HumanEval/103
prompt: "\ndef rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n"
entry_point: rounded_avg
canonical_solution: |2
      if m < n:
          return -1
      summation = 0
      for i in range(n, m+1):
          summation += i
      return bin(round(summation/(m - n + 1)))
test: |+
  def check(candidate):

      # Check some simple cases
      assert candidate(1, 5) == "0b11"
      assert candidate(7, 13) == "0b1010"
      assert candidate(964,977) == "0b1111001010"
      assert candidate(996,997) == "0b1111100100"
      assert candidate(560,851) == "0b1011000010"
      assert candidate(185,546) == "0b101101110"
      assert candidate(362,496) == "0b110101101"
      assert candidate(350,902) == "0b1001110010"
      assert candidate(197,233) == "0b11010111"


      # Check some edge cases that are easy to work out by hand.
      assert candidate(7, 5) == -1
      assert candidate(5, 1) == -1
      assert candidate(5, 5) == "0b101"

---
task_id: HumanEval/104
prompt: "\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n"
entry_point: unique_digits
canonical_solution: |2
      odd_digit_elements = []
      for i in x:
          if all (int(c) % 2 == 1 for c in str(i)):
              odd_digit_elements.append(i)
      return sorted(odd_digit_elements)
test: |+
  def check(candidate):

      # Check some simple cases
      assert candidate([15, 33, 1422, 1]) == [1, 15, 33]
      assert candidate([152, 323, 1422, 10]) == []
      assert candidate([12345, 2033, 111, 151]) == [111, 151]
      assert candidate([135, 103, 31]) == [31, 135]

      # Check some edge cases that are easy to work out by hand.
      assert True

---
task_id: HumanEval/105
prompt: "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n"
entry_point: by_length
canonical_solution: |2
      dic = {
          1: "One",
          2: "Two",
          3: "Three",
          4: "Four",
          5: "Five",
          6: "Six",
          7: "Seven",
          8: "Eight",
          9: "Nine",
      }
      sorted_arr = sorted(arr, reverse=True)
      new_arr = []
      for var in sorted_arr:
          try:
              new_arr.append(dic[var])
          except:
              pass
      return new_arr
test: |+
  def check(candidate):

      # Check some simple cases
      assert True, "This prints if this assert fails 1 (good for debugging!)"
      assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == ["Eight", "Five", "Four", "Three", "Two", "Two", "One", "One"], "Error"
      assert candidate([]) == [], "Error"
      assert candidate([1, -1 , 55]) == ['One'], "Error"

      # Check some edge cases that are easy to work out by hand.
      assert True, "This prints if this assert fails 2 (also good for debugging!)"
      assert candidate([1, -1, 3, 2]) == ["Three", "Two", "One"]
      assert candidate([9, 4, 8]) == ["Nine", "Eight", "Four"]

---
task_id: HumanEval/106
prompt: |2

  def f(n):
      """ Implement the function f that takes n as a parameter,
      and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even
      or the sum of numbers from 1 to i otherwise.
      i starts from 1.
      the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).
      Example:
      f(5) == [1, 2, 6, 24, 15]
      """
entry_point: f
canonical_solution: |2
      ret = []
      for i in range(1,n+1):
          if i%2 == 0:
              x = 1
              for j in range(1,i+1): x *= j
              ret += [x]
          else:
              x = 0
              for j in range(1,i+1): x += j
              ret += [x]
      return ret
test: |
  def check(candidate):

      assert candidate(5) == [1, 2, 6, 24, 15]
      assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]
      assert candidate(1) == [1]
      assert candidate(3) == [1, 2, 6]
---
task_id: HumanEval/107
prompt: |2

  def even_odd_palindrome(n):
      """
      Given a positive integer n, return a tuple that has the number of even and odd
      integer palindromes that fall within the range(1, n), inclusive.

      Example 1:

          Input: 3
          Output: (1, 2)
          Explanation:
          Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.

      Example 2:

          Input: 12
          Output: (4, 6)
          Explanation:
          Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.

      Note:
          1. 1 <= n <= 10^3
          2. returned tuple has the number of even and odd integer palindromes respectively.
      """
entry_point: even_odd_palindrome
canonical_solution: |2
      def is_palindrome(n):
          return str(n) == str(n)[::-1]

      even_palindrome_count = 0
      odd_palindrome_count = 0

      for i in range(1, n+1):
          if i%2 == 1 and is_palindrome(i):
                  odd_palindrome_count += 1
          elif i%2 == 0 and is_palindrome(i):
              even_palindrome_count += 1
      return (even_palindrome_count, odd_palindrome_count)
test: |+
  def check(candidate):

      # Check some simple cases
      assert candidate(123) == (8, 13)
      assert candidate(12) == (4, 6)
      assert candidate(3) == (1, 2)
      assert candidate(63) == (6, 8)
      assert candidate(25) == (5, 6)
      assert candidate(19) == (4, 6)
      assert candidate(9) == (4, 5), "This prints if this assert fails 1 (good for debugging!)"

      # Check some edge cases that are easy to work out by hand.
      assert candidate(1) == (0, 1), "This prints if this assert fails 2 (also good for debugging!)"

---
task_id: HumanEval/108
prompt: |2

  def count_nums(arr):
      """
      Write a function count_nums which takes an array of integers and returns
      the number of elements which has a sum of digits > 0.
      If a number is negative, then its first signed digit will be negative:
      e.g. -123 has signed digits -1, 2, and 3.
      >>> count_nums([]) == 0
      >>> count_nums([-1, 11, -11]) == 1
      >>> count_nums([1, 1, 2]) == 3
      """
entry_point: count_nums
canonical_solution: "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n"
test: |+
  def check(candidate):

      # Check some simple cases
      assert candidate([]) == 0
      assert candidate([-1, -2, 0]) == 0
      assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6
      assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5
      assert candidate([1, 100, 98, -7, 1, -1]) == 4
      assert candidate([12, 23, 34, -45, -56, 0]) == 5
      assert candidate([-0, 1**0]) == 1
      assert candidate([1]) == 1

      # Check some edge cases that are easy to work out by hand.
      assert True, "This prints if this assert fails 2 (also good for debugging!)"

---
task_id: HumanEval/109
prompt: "\ndef move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n"
entry_point: move_one_ball
canonical_solution: "    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True\n"
test: |
  def check(candidate):

      # Check some simple cases
      assert candidate([3, 4, 5, 1, 2])==True, "This prints if this assert fails 1 (good for debugging!)"
      assert candidate([3, 5, 10, 1, 2])==True
      assert candidate([4, 3, 1, 2])==False
      # Check some edge cases that are easy to work out by hand.
      assert candidate([3, 5, 4, 1, 2])==False, "This prints if this assert fails 2 (also good for debugging!)"
      assert candidate([])==True
---
task_id: HumanEval/110
prompt: |2

  def exchange(lst1, lst2):
      """In this problem, you will implement a function that takes two lists of numbers,
      and determines whether it is possible to perform an exchange of elements
      between them to make lst1 a list of only even numbers.
      There is no limit on the number of exchanged elements between lst1 and lst2.
      If it is possible to exchange elements between the lst1 and lst2 to make
      all the elements of lst1 to be even, return "YES".
      Otherwise, return "NO".
      For example:
      exchange([1, 2, 3, 4], [1, 2, 3, 4]) => "YES"
      exchange([1, 2, 3, 4], [1, 5, 3, 4]) => "NO"
      It is assumed that the input lists will be non-empty.
      """
entry_point: exchange
canonical_solution: "    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n            \n"
test: "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\" \n    assert candidate([5, 7, 3], [2, 6, 4]) == \"YES\"\n    assert candidate([5, 7, 3], [2, 6, 3]) == \"NO\" \n    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([100, 200], [200, 200]) == \"YES\"\n\n"
---
task_id: HumanEval/111
prompt: "\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n"
entry_point: histogram
canonical_solution: "    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n"
test: "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('a b b a') == {'a':2,'b': 2}, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('a b c a b') == {'a': 2, 'b': 2}, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate('b b b b a') == {'b': 4}, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 6 (good for debugging!)\"\n    \n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == {}, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate('a') == {'a': 1}, \"This prints if this assert fails 8 (also good for debugging!)\"\n\n"
---
task_id: HumanEval/112
prompt: |2

  def reverse_delete(s,c):
      """Task
      We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
      then check if the result string is palindrome.
      A string is called palindrome if it reads the same backward as forward.
      You should return a tuple containing the result string and True/False for the check.
      Example
      For s = "abcde", c = "ae", the result should be ('bcd',False)
      For s = "abcdef", c = "b"  the result should be ('acdef',False)
      For s = "abcdedcba", c = "ab", the result should be ('cdedc',True)
      """
entry_point: reverse_delete
canonical_solution: |2
      s = ''.join([char for char in s if char not in c])
      return (s,s[::-1] == s)
test: |
  def check(candidate):

      assert candidate("abcde","ae") == ('bcd',False)
      assert candidate("abcdef", "b") == ('acdef',False)
      assert candidate("abcdedcba","ab") == ('cdedc',True)
      assert candidate("dwik","w") == ('dik',False)
      assert candidate("a","a") == ('',True)
      assert candidate("abcdedcba","") == ('abcdedcba',True)
      assert candidate("abcdedcba","v") == ('abcdedcba',True)
      assert candidate("vabba","v") == ('abba',True)
      assert candidate("mamma", "mia") == ("", True)
---
task_id: HumanEval/113
prompt: |2

  def odd_count(lst):
      """Given a list of strings, where each string consists of only digits, return a list.
      Each element i of the output should be "the number of odd elements in the
      string i of the input." where all the i's should be replaced by the number
      of odd digits in the i'th string of the input.

      >>> odd_count(['1234567'])
      ["the number of odd elements 4n the str4ng 4 of the 4nput."]
      >>> odd_count(['3',"11111111"])
      ["the number of odd elements 1n the str1ng 1 of the 1nput.",
       "the number of odd elements 8n the str8ng 8 of the 8nput."]
      """
entry_point: odd_count
canonical_solution: |2
      res = []
      for arr in lst:
          n = sum(int(d)%2==1 for d in arr)
          res.append("the number of odd elements " + str(n) + "n the str"+ str(n) +"ng "+ str(n) +" of the "+ str(n) +"nput.")
      return res
test: |+
  def check(candidate):

      # Check some simple cases
      assert candidate(['1234567']) == ["the number of odd elements 4n the str4ng 4 of the 4nput."], "Test 1"
      assert candidate(['3',"11111111"]) == ["the number of odd elements 1n the str1ng 1 of the 1nput.", "the number of odd elements 8n the str8ng 8 of the 8nput."], "Test 2"
      assert candidate(['271', '137', '314']) == [
          'the number of odd elements 2n the str2ng 2 of the 2nput.',
          'the number of odd elements 3n the str3ng 3 of the 3nput.',
          'the number of odd elements 2n the str2ng 2 of the 2nput.'
      ]

      # Check some edge cases that are easy to work out by hand.
      assert True, "This prints if this assert fails 2 (also good for debugging!)"

---
task_id: HumanEval/114
prompt: |2

  def minSubArraySum(nums):
      """
      Given an array of integers nums, find the minimum sum of any non-empty sub-array
      of nums.
      Example
      minSubArraySum([2, 3, 4, 1, 2, 4]) == 1
      minSubArraySum([-1, -2, -3]) == -6
      """
entry_point: minSubArraySum
canonical_solution: |2
      max_sum = 0
      s = 0
      for num in nums:
          s += -num
          if (s < 0):
              s = 0
          max_sum = max(s, max_sum)
      if max_sum == 0:
          max_sum = max(-i for i in nums)
      min_sum = -max_sum
      return min_sum
test: |
  def check(candidate):

      # Check some simple cases
      assert candidate([2, 3, 4, 1, 2, 4]) == 1, "This prints if this assert fails 1 (good for debugging!)"
      assert candidate([-1, -2, -3]) == -6
      assert candidate([-1, -2, -3, 2, -10]) == -14
      assert candidate([-9999999999999999]) == -9999999999999999
      assert candidate([0, 10, 20, 1000000]) == 0
      assert candidate([-1, -2, -3, 10, -5]) == -6
      assert candidate([100, -1, -2, -3, 10, -5]) == -6
      assert candidate([10, 11, 13, 8, 3, 4]) == 3
      assert candidate([100, -33, 32, -1, 0, -2]) == -33

      # Check some edge cases that are easy to work out by hand.
      assert candidate([-10]) == -10, "This prints if this assert fails 2 (also good for debugging!)"
      assert candidate([7]) == 7
      assert candidate([1, -1]) == -1
---
task_id: HumanEval/115
prompt: "\ndef max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n"
entry_point: max_fill
canonical_solution: |2
      return sum([math.ceil(sum(arr)/capacity) for arr in grid])
test: |+
  def check(candidate):


      # Check some simple cases
      assert True, "This prints if this assert fails 1 (good for debugging!)"
      assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, "Error"
      assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, "Error"
      assert candidate([[0,0,0], [0,0,0]], 5) == 0, "Error"

      # Check some edge cases that are easy to work out by hand.
      assert True, "This prints if this assert fails 2 (also good for debugging!)"
      assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, "Error"
      assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, "Error"

---
task_id: HumanEval/116
prompt: |2

  def sort_array(arr):
      """
      In this Kata, you have to sort an array of non-negative integers according to
      number of ones in their binary representation in ascending order.
      For similar number of ones, sort based on decimal value.

      It must be implemented like this:
      >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]
      >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]
      >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]
      """
entry_point: sort_array
canonical_solution: |2
      return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))
test: |+
  def check(candidate):

      # Check some simple cases
      assert True, "This prints if this assert fails 1 (good for debugging!)"
      assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]
      assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]
      assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]
      assert candidate([]) == []
      assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]
      assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]
      assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]
      assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]

      # Check some edge cases that are easy to work out by hand.
      assert True, "This prints if this assert fails 2 (also good for debugging!)"

---
task_id: HumanEval/117
prompt: "\ndef select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n"
entry_point: select_words
canonical_solution: "    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n"
test: "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(candidate(\"Mary had a little lamb\", 4))      \n    assert candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(candidate(\"Mary had a little lamb\", 3))  \n    assert candidate(\"simple white space\", 2) == [], \"Third test error: \" + str(candidate(\"simple white space\", 2))      \n    assert candidate(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(candidate(\"Hello world\", 4))  \n    assert candidate(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(candidate(\"Uncle sam\", 3))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"\", 4) == [], \"1st edge test error: \" + str(candidate(\"\", 4))\n    assert candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(candidate(\"a b c d e f\", 1))\n\n"
---
task_id: HumanEval/118
prompt: "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n"
entry_point: get_closest_vowel
canonical_solution: |2
      if len(word) < 3:
          return ""

      vowels = {"a", "e", "i", "o", "u", "A", "E", 'O', 'U', 'I'}
      for i in range(len(word)-2, 0, -1):
          if word[i] in vowels:
              if (word[i+1] not in vowels) and (word[i-1] not in vowels):
                  return word[i]
      return ""
test: |+
  def check(candidate):

      # Check some simple cases
      assert candidate("yogurt") == "u"
      assert candidate("full") == "u"
      assert candidate("easy") == ""
      assert candidate("eAsy") == ""
      assert candidate("ali") == ""
      assert candidate("bad") == "a"
      assert candidate("most") == "o"
      assert candidate("ab") == ""
      assert candidate("ba") == ""
      assert candidate("quick") == ""
      assert candidate("anime") == "i"
      assert candidate("Asia") == ""
      assert candidate("Above") == "o"

      # Check some edge cases that are easy to work out by hand.
      assert True

---
task_id: HumanEval/119
prompt: |2

  def match_parens(lst):
      '''
      You are given a list of two strings, both strings consist of open
      parentheses '(' or close parentheses ')' only.
      Your job is to check if it is possible to concatenate the two strings in
      some order, that the resulting string will be good.
      A string S is considered to be good if and only if all parentheses in S
      are balanced. For example: the string '(())()' is good, while the string
      '())' is not.
      Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.

      Examples:
      match_parens(['()(', ')']) == 'Yes'
      match_parens([')', ')']) == 'No'
      '''
entry_point: match_parens
canonical_solution: |2
      def check(s):
          val = 0
          for i in s:
              if i == '(':
                  val = val + 1
              else:
                  val = val - 1
              if val < 0:
                  return False
          return True if val == 0 else False

      S1 = lst[0] + lst[1]
      S2 = lst[1] + lst[0]
      return 'Yes' if check(S1) or check(S2) else 'No'
test: "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['()(', ')']) == 'Yes'\n    assert candidate([')', ')']) == 'No'\n    assert candidate(['(()(())', '())())']) == 'No'\n    assert candidate([')())', '(()()(']) == 'Yes'\n    assert candidate(['(())))', '(()())((']) == 'Yes'\n    assert candidate(['()', '())']) == 'No'\n    assert candidate(['(()(', '()))()']) == 'Yes'\n    assert candidate(['((((', '((())']) == 'No'\n    assert candidate([')(()', '(()(']) == 'No'\n    assert candidate([')(', ')(']) == 'No'\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(['(', ')']) == 'Yes'\n    assert candidate([')', '(']) == 'Yes' \n\n"
---
task_id: HumanEval/120
prompt: "\ndef maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n"
entry_point: maximum
canonical_solution: |2
      if k == 0:
          return []
      arr.sort()
      ans = arr[-k:]
      return ans
test: |+
  def check(candidate):

      # Check some simple cases
      assert candidate([-3, -4, 5], 3) == [-4, -3, 5]
      assert candidate([4, -4, 4], 2) == [4, 4]
      assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]
      assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]
      assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]
      assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]
      assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]
      assert candidate([1, 0, 5, -7], 1) == [5]
      assert candidate([4, -4], 2) == [-4, 4]
      assert candidate([-10, 10], 2) == [-10, 10]

      # Check some edge cases that are easy to work out by hand.
      assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []

---
task_id: HumanEval/121
prompt: "\ndef solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n"
entry_point: solution
canonical_solution: |2
      return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])
test: |+
  def check(candidate):

      # Check some simple cases
      assert candidate([5, 8, 7, 1])    == 12
      assert candidate([3, 3, 3, 3, 3]) == 9
      assert candidate([30, 13, 24, 321]) == 0
      assert candidate([5, 9]) == 5
      assert candidate([2, 4, 8]) == 0
      assert candidate([30, 13, 23, 32]) == 23
      assert candidate([3, 13, 2, 9]) == 3

      # Check some edge cases that are easy to work out by hand.

---
task_id: HumanEval/122
prompt: |2

  def add_elements(arr, k):
      """
      Given a non-empty array of integers arr and an integer k, return
      the sum of the elements with at most two digits from the first k elements of arr.

      Example:

          Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4
          Output: 24 # sum of 21 + 3

      Constraints:
          1. 1 <= len(arr) <= 100
          2. 1 <= k <= len(arr)
      """
entry_point: add_elements
canonical_solution: |2
      return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)
test: |+
  def check(candidate):

      # Check some simple cases
      assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4
      assert candidate([111,121,3,4000,5,6], 2) == 0
      assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125
      assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, "This prints if this assert fails 1 (good for debugging!)"

      # Check some edge cases that are easy to work out by hand.
      assert candidate([1], 1) == 1, "This prints if this assert fails 2 (also good for debugging!)"

---
task_id: HumanEval/123
prompt: "\ndef get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n"
entry_point: get_odd_collatz
canonical_solution: "    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n"
test: |+
  def check(candidate):

      # Check some simple cases
      assert candidate(14) == [1, 5, 7, 11, 13, 17]
      assert candidate(5) == [1, 5]
      assert candidate(12) == [1, 3, 5], "This prints if this assert fails 1 (good for debugging!)"

      # Check some edge cases that are easy to work out by hand.
      assert candidate(1) == [1], "This prints if this assert fails 2 (also good for debugging!)"

---
task_id: HumanEval/124
prompt: "\ndef valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n"
entry_point: valid_date
canonical_solution: |2
      try:
          date = date.strip()
          month, day, year = date.split('-')
          month, day, year = int(month), int(day), int(year)
          if month < 1 or month > 12:
              return False
          if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:
              return False
          if month in [4,6,9,11] and day < 1 or day > 30:
              return False
          if month == 2 and day < 1 or day > 29:
              return False
      except:
          return False

      return True
test: |
  def check(candidate):

      # Check some simple cases
      assert candidate('03-11-2000') == True

      assert candidate('15-01-2012') == False

      assert candidate('04-0-2040') == False

      assert candidate('06-04-2020') == True

      assert candidate('01-01-2007') == True

      assert candidate('03-32-2011') == False

      assert candidate('') == False

      assert candidate('04-31-3000') == False

      assert candidate('06-06-2005') == True

      assert candidate('21-31-2000') == False

      assert candidate('04-12-2003') == True

      assert candidate('04122003') == False

      assert candidate('20030412') == False

      assert candidate('2003-04') == False

      assert candidate('2003-04-12') == False

      assert candidate('04-2003') == False
---
task_id: HumanEval/125
prompt: "\ndef split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n"
entry_point: split_words
canonical_solution: |2
      if " " in txt:
          return txt.split()
      elif "," in txt:
          return txt.replace(',',' ').split()
      else:
          return len([i for i in txt if i.islower() and ord(i)%2 == 0])
test: |
  def check(candidate):

      assert candidate("Hello world!") == ["Hello","world!"]
      assert candidate("Hello,world!") == ["Hello","world!"]
      assert candidate("Hello world,!") == ["Hello","world,!"]
      assert candidate("Hello,Hello,world !") == ["Hello,Hello,world","!"]
      assert candidate("abcdef") == 3
      assert candidate("aaabb") == 2
      assert candidate("aaaBb") == 1
      assert candidate("") == 0
---
task_id: HumanEval/126
prompt: |2

  def is_sorted(lst):
      '''
      Given a list of numbers, return whether or not they are sorted
      in ascending order. If list has more than 1 duplicate of the same
      number, return False. Assume no negative numbers and only integers.

      Examples
      is_sorted([5]) ➞ True
      is_sorted([1, 2, 3, 4, 5]) ➞ True
      is_sorted([1, 3, 2, 4, 5]) ➞ False
      is_sorted([1, 2, 3, 4, 5, 6]) ➞ True
      is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True
      is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False
      is_sorted([1, 2, 2, 3, 3, 4]) ➞ True
      is_sorted([1, 2, 2, 2, 3, 4]) ➞ False
      '''
entry_point: is_sorted
canonical_solution: "    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n"
test: "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5]) == True\n    assert candidate([1, 2, 3, 4, 5]) == True\n    assert candidate([1, 3, 2, 4, 5]) == False\n    assert candidate([1, 2, 3, 4, 5, 6]) == True\n    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True\n    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == True, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([1]) == True, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([3, 2, 1]) == False, \"This prints if this assert fails 4 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 2, 2, 3, 4]) == False, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate([1, 2, 3, 3, 3, 4]) == False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate([1, 2, 2, 3, 3, 4]) == True, \"This prints if this assert fails 7 (good for debugging!)\"\n    assert candidate([1, 2, 3, 4]) == True, \"This prints if this assert fails 8 (good for debugging!)\"\n\n"
---
task_id: HumanEval/127
prompt: "\ndef intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n"
entry_point: intersection
canonical_solution: |2
      def is_prime(num):
          if num == 1 or num == 0:
              return False
          if num == 2:
              return True
          for i in range(2, num):
              if num%i == 0:
                  return False
          return True

      l = max(interval1[0], interval2[0])
      r = min(interval1[1], interval2[1])
      length = r - l
      if length > 0 and is_prime(length):
          return "YES"
      return "NO"
test: |+
  def check(candidate):

      # Check some simple cases
      assert candidate((1, 2), (2, 3)) == "NO"
      assert candidate((-1, 1), (0, 4)) == "NO"
      assert candidate((-3, -1), (-5, 5)) == "YES"
      assert candidate((-2, 2), (-4, 0)) == "YES"

      # Check some edge cases that are easy to work out by hand.
      assert candidate((-11, 2), (-1, -1)) == "NO"
      assert candidate((1, 2), (3, 5)) == "NO"
      assert candidate((1, 2), (1, 2)) == "NO"
      assert candidate((-2, -2), (-3, -2)) == "NO"

---
task_id: HumanEval/128
prompt: |2

  def prod_signs(arr):
      """
      You are given an array arr of integers and you need to return
      sum of magnitudes of integers multiplied by product of all signs
      of each number in the array, represented by 1, -1 or 0.
      Note: return None for empty arr.

      Example:
      >>> prod_signs([1, 2, 2, -4]) == -9
      >>> prod_signs([0, 1]) == 0
      >>> prod_signs([]) == None
      """
entry_point: prod_signs
canonical_solution: |2
      if not arr: return None
      prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))
      return prod * sum([abs(i) for i in arr])
test: |+
  def check(candidate):

      # Check some simple cases
      assert True, "This prints if this assert fails 1 (good for debugging!)"
      assert candidate([1, 2, 2, -4]) == -9
      assert candidate([0, 1]) == 0
      assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10
      assert candidate([]) == None
      assert candidate([2, 4,1, 2, -1, -1, 9]) == 20
      assert candidate([-1, 1, -1, 1]) == 4
      assert candidate([-1, 1, 1, 1]) == -4
      assert candidate([-1, 1, 1, 0]) == 0

      # Check some edge cases that are easy to work out by hand.
      assert True, "This prints if this assert fails 2 (also good for debugging!)"

---
task_id: HumanEval/129
prompt: "\ndef minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n"
entry_point: minPath
canonical_solution: |2
      n = len(grid)
      val = n * n + 1
      for i in range(n):
          for j in range(n):
              if grid[i][j] == 1:
                  temp = []
                  if i != 0:
                      temp.append(grid[i - 1][j])

                  if j != 0:
                      temp.append(grid[i][j - 1])

                  if i != n - 1:
                      temp.append(grid[i + 1][j])

                  if j != n - 1:
                      temp.append(grid[i][j + 1])

                  val = min(temp)

      ans = []
      for i in range(k):
          if i % 2 == 0:
              ans.append(1)
          else:
              ans.append(val)
      return ans
test: |+
  def check(candidate):

      # Check some simple cases
      print
      assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]
      assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]
      assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]
      assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]
      assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]
      assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]
      assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]
      assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]
      assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]

      # Check some edge cases that are easy to work out by hand.
      assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]
      assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]

---
task_id: HumanEval/130
prompt: "\ndef tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n"
entry_point: tri
canonical_solution: |2
      if n == 0:
          return [1]
      my_tri = [1, 3]
      for i in range(2, n + 1):
          if i % 2 == 0:
              my_tri.append(i / 2 + 1)
          else:
              my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)
      return my_tri
test: "def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate(3) == [1, 3, 2.0, 8.0]\n    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]\n    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]\n    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]\n    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]\n    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]\n    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]\n    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n"
---
task_id: HumanEval/131
prompt: |2

  def digits(n):
      """Given a positive integer n, return the product of the odd digits.
      Return 0 if all digits are even.
      For example:
      digits(1)  == 1
      digits(4)  == 0
      digits(235) == 15
      """
entry_point: digits
canonical_solution: |2
      product = 1
      odd_count = 0
      for digit in str(n):
          int_digit = int(digit)
          if int_digit%2 == 1:
              product= product*int_digit
              odd_count+=1
      if odd_count ==0:
          return 0
      else:
          return product
test: |+
  def check(candidate):

      # Check some simple cases
      assert candidate(5) == 5
      assert candidate(54) == 5
      assert candidate(120) ==1
      assert candidate(5014) == 5
      assert candidate(98765) == 315
      assert candidate(5576543) == 2625

      # Check some edge cases that are easy to work out by hand.
      assert candidate(2468) == 0

---
task_id: HumanEval/132
prompt: "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') ➞ True\n    is_nested('[]]]]]]][[[[[]') ➞ False\n    is_nested('[][]') ➞ False\n    is_nested('[]') ➞ False\n    is_nested('[[][]]') ➞ True\n    is_nested('[[]][[') ➞ True\n    '''\n"
entry_point: is_nested
canonical_solution: "    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n    \n"
test: |+
  def check(candidate):

      # Check some simple cases
      assert candidate('[[]]') == True, "This prints if this assert fails 1 (good for debugging!)"
      assert candidate('[]]]]]]][[[[[]') == False
      assert candidate('[][]') == False
      assert candidate(('[]')) == False
      assert candidate('[[[[]]]]') == True
      assert candidate('[]]]]]]]]]]') == False
      assert candidate('[][][[]]') == True
      assert candidate('[[]') == False
      assert candidate('[]]') == False
      assert candidate('[[]][[') == True
      assert candidate('[[][]]') == True

      # Check some edge cases that are easy to work out by hand.
      assert candidate('') == False, "This prints if this assert fails 2 (also good for debugging!)"
      assert candidate('[[[[[[[[') == False
      assert candidate(']]]]]]]]') == False

---
task_id: HumanEval/133
prompt: "\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n"
entry_point: sum_squares
canonical_solution: |2
      import math
      squared = 0
      for i in lst:
          squared += math.ceil(i)**2
      return squared
test: |+
  def check(candidate):

      # Check some simple cases
      assert candidate([1,2,3])==14, "This prints if this assert fails 1 (good for debugging!)"
      assert candidate([1.0,2,3])==14, "This prints if this assert fails 1 (good for debugging!)"
      assert candidate([1,3,5,7])==84, "This prints if this assert fails 1 (good for debugging!)"
      assert candidate([1.4,4.2,0])==29, "This prints if this assert fails 1 (good for debugging!)"
      assert candidate([-2.4,1,1])==6, "This prints if this assert fails 1 (good for debugging!)"

      assert candidate([100,1,15,2])==10230, "This prints if this assert fails 1 (good for debugging!)"
      assert candidate([10000,10000])==200000000, "This prints if this assert fails 1 (good for debugging!)"
      assert candidate([-1.4,4.6,6.3])==75, "This prints if this assert fails 1 (good for debugging!)"
      assert candidate([-1.4,17.9,18.9,19.9])==1086, "This prints if this assert fails 1 (good for debugging!)"


      # Check some edge cases that are easy to work out by hand.
      assert candidate([0])==0, "This prints if this assert fails 2 (also good for debugging!)"
      assert candidate([-1])==1, "This prints if this assert fails 2 (also good for debugging!)"
      assert candidate([-1,1,0])==2, "This prints if this assert fails 2 (also good for debugging!)"

---
task_id: HumanEval/134
prompt: "\ndef check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") ➞ False\n    check_if_last_char_is_a_letter(\"apple pi e\") ➞ True\n    check_if_last_char_is_a_letter(\"apple pi e \") ➞ False\n    check_if_last_char_is_a_letter(\"\") ➞ False \n    '''\n"
entry_point: check_if_last_char_is_a_letter
canonical_solution: " \n    check = txt.split(' ')[-1]\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False\n"
test: |+
  def check(candidate):

      # Check some simple cases
      assert candidate("apple") == False
      assert candidate("apple pi e") == True
      assert candidate("eeeee") == False
      assert candidate("A") == True
      assert candidate("Pumpkin pie ") == False
      assert candidate("Pumpkin pie 1") == False
      assert candidate("") == False
      assert candidate("eeeee e ") == False
      assert candidate("apple pie") == False
      assert candidate("apple pi e ") == False

      # Check some edge cases that are easy to work out by hand.
      assert True

---
task_id: HumanEval/135
prompt: |2

  def can_arrange(arr):
      """Create a function which returns the largest index of an element which
      is not greater than or equal to the element immediately preceding it. If
      no such element exists then return -1. The given array will not contain
      duplicate values.

      Examples:
      can_arrange([1,2,4,3,5]) = 3
      can_arrange([1,2,3]) = -1
      """
entry_point: can_arrange
canonical_solution: |2
      ind=-1
      i=1
      while i<len(arr):
        if arr[i]<arr[i-1]:
          ind=i
        i+=1
      return ind
test: |+
  def check(candidate):

      # Check some simple cases
      assert candidate([1,2,4,3,5])==3
      assert candidate([1,2,4,5])==-1
      assert candidate([1,4,2,5,6,7,8,9,10])==2
      assert candidate([4,8,5,7,3])==4

      # Check some edge cases that are easy to work out by hand.
      assert candidate([])==-1

---
task_id: HumanEval/136
prompt: |2

  def largest_smallest_integers(lst):
      '''
      Create a function that returns a tuple (a, b), where 'a' is
      the largest of negative integers, and 'b' is the smallest
      of positive integers in a list.
      If there is no negative or positive integers, return them as None.

      Examples:
      largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)
      largest_smallest_integers([]) == (None, None)
      largest_smallest_integers([0]) == (None, None)
      '''
entry_point: largest_smallest_integers
canonical_solution: |2
      smallest = list(filter(lambda x: x < 0, lst))
      largest = list(filter(lambda x: x > 0, lst))
      return (max(smallest) if smallest else None, min(largest) if largest else None)
test: |
  def check(candidate):

      # Check some simple cases
      assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)
      assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)
      assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)
      assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)
      assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)
      assert candidate([]) == (None, None)
      assert candidate([0]) == (None, None)
      assert candidate([-1, -3, -5, -6]) == (-1, None)
      assert candidate([-1, -3, -5, -6, 0]) == (-1, None)
      assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)
      assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)

      # Check some edge cases that are easy to work out by hand.
      assert True
---
task_id: HumanEval/137
prompt: |2

  def compare_one(a, b):
      """
      Create a function that takes integers, floats, or strings representing
      real numbers, and returns the larger variable in its given variable type.
      Return None if the values are equal.
      Note: If a real number is represented as a string, the floating point might be . or ,

      compare_one(1, 2.5) ➞ 2.5
      compare_one(1, "2,3") ➞ "2,3"
      compare_one("5,1", "6") ➞ "6"
      compare_one("1", 1) ➞ None
      """
entry_point: compare_one
canonical_solution: "    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n"
test: |+
  def check(candidate):

      # Check some simple cases
      assert candidate(1, 2) == 2
      assert candidate(1, 2.5) == 2.5
      assert candidate(2, 3) == 3
      assert candidate(5, 6) == 6
      assert candidate(1, "2,3") == "2,3"
      assert candidate("5,1", "6") == "6"
      assert candidate("1", "2") == "2"
      assert candidate("1", 1) == None

      # Check some edge cases that are easy to work out by hand.
      assert True

---
task_id: HumanEval/138
prompt: |2

  def is_equal_to_sum_even(n):
      """Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers
      Example
      is_equal_to_sum_even(4) == False
      is_equal_to_sum_even(6) == False
      is_equal_to_sum_even(8) == True
      """
entry_point: is_equal_to_sum_even
canonical_solution: |2
      return n%2 == 0 and n >= 8
test: |
  def check(candidate):
      assert candidate(4) == False
      assert candidate(6) == False
      assert candidate(8) == True
      assert candidate(10) == True
      assert candidate(11) == False
      assert candidate(12) == True
      assert candidate(13) == False
      assert candidate(16) == True
---
task_id: HumanEval/139
prompt: |2

  def special_factorial(n):
      """The Brazilian factorial is defined as:
      brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
      where n > 0

      For example:
      >>> special_factorial(4)
      288

      The function will receive an integer as input and should return the special
      factorial of this integer.
      """
entry_point: special_factorial
canonical_solution: |2
      fact_i = 1
      special_fact = 1
      for i in range(1, n+1):
          fact_i *= i
          special_fact *= fact_i
      return special_fact
test: |+
  def check(candidate):

      # Check some simple cases
      assert candidate(4) == 288, "Test 4"
      assert candidate(5) == 34560, "Test 5"
      assert candidate(7) == 125411328000, "Test 7"

      # Check some edge cases that are easy to work out by hand.
      assert candidate(1) == 1, "Test 1"

---
task_id: HumanEval/140
prompt: "\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n"
entry_point: fix_spaces
canonical_solution: |2
      new_text = ""
      i = 0
      start, end = 0, 0
      while i < len(text):
          if text[i] == " ":
              end += 1
          else:
              if end - start > 2:
                  new_text += "-"+text[i]
              elif end - start > 0:
                  new_text += "_"*(end - start)+text[i]
              else:
                  new_text += text[i]
              start, end = i+1, i+1
          i+=1
      if end - start > 2:
          new_text += "-"
      elif end - start > 0:
          new_text += "_"
      return new_text
test: "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Example\") == \"Example\", \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\", \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\", \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Exa   mple\") == \"Exa-mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n\n"
---
task_id: HumanEval/141
prompt: "\ndef file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n"
entry_point: file_name_check
canonical_solution: |2
      suf = ['txt', 'exe', 'dll']
      lst = file_name.split(sep='.')
      if len(lst) != 2:
          return 'No'
      if not lst[1] in suf:
          return 'No'
      if len(lst[0]) == 0:
          return 'No'
      if not lst[0][0].isalpha():
          return 'No'
      t = len([x for x in lst[0] if x.isdigit()])
      if t > 3:
          return 'No'
      return 'Yes'
test: "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"example.txt\") == 'Yes'\n    assert candidate(\"1example.dll\") == 'No'\n    assert candidate('s1sdf3.asd') == 'No'\n    assert candidate('K.dll') == 'Yes'\n    assert candidate('MY16FILE3.exe') == 'Yes'\n    assert candidate('His12FILE94.exe') == 'No'\n    assert candidate('_Y.txt') == 'No'\n    assert candidate('?aREYA.exe') == 'No'\n    assert candidate('/this_is_valid.dll') == 'No'\n    assert candidate('this_is_valid.wow') == 'No'\n    assert candidate('this_is_valid.txt') == 'Yes'\n    assert candidate('this_is_valid.txtexe') == 'No'\n    assert candidate('#this2_i4s_5valid.ten') == 'No'\n    assert candidate('@this1_is6_valid.exe') == 'No'\n    assert candidate('this_is_12valid.6exe4.txt') == 'No'\n    assert candidate('all.exe.txt') == 'No'\n    assert candidate('I563_No.exe') == 'Yes'\n    assert candidate('Is3youfault.txt') == 'Yes'\n    assert candidate('no_one#knows.dll') == 'Yes'\n    assert candidate('1I563_Yes3.exe') == 'No'\n    assert candidate('I563_Yes3.txtt') == 'No'\n    assert candidate('final..txt') == 'No'\n    assert candidate('final132') == 'No'\n    assert candidate('_f4indsartal132.') == 'No'\n    \n        \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('.txt') == 'No'\n    assert candidate('s.') == 'No'\n\n"
---
task_id: HumanEval/142
prompt: "\n\n\ndef sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n"
entry_point: sum_squares
canonical_solution: |2
      result =[]
      for i in range(len(lst)):
          if i %3 == 0:
              result.append(lst[i]**2)
          elif i % 4 == 0 and i%3 != 0:
              result.append(lst[i]**3)
          else:
              result.append(lst[i])
      return sum(result)
test: "def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate([1,2,3]) == 6\n    assert candidate([1,4,9]) == 14\n    assert candidate([]) == 0\n    assert candidate([1,1,1,1,1,1,1,1,1]) == 9\n    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3\n    assert candidate([0]) == 0\n    assert candidate([-1,-5,2,-1,-5]) == -126\n    assert candidate([-56,-99,1,0,-2]) == 3030\n    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0\n    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448\n    \n    \n    # Don't remove this line:\n"
---
task_id: HumanEval/143
prompt: |2

  def words_in_sentence(sentence):
      """
      You are given a string representing a sentence,
      the sentence contains some words separated by a space,
      and you have to return a string that contains the words from the original sentence,
      whose lengths are prime numbers,
      the order of the words in the new string should be the same as the original one.

      Example 1:
          Input: sentence = "This is a test"
          Output: "is"

      Example 2:
          Input: sentence = "lets go for swimming"
          Output: "go for"

      Constraints:
          * 1 <= len(sentence) <= 100
          * sentence contains only letters
      """
entry_point: words_in_sentence
canonical_solution: |2
      new_lst = []
      for word in sentence.split():
          flg = 0
          if len(word) == 1:
              flg = 1
          for i in range(2, len(word)):
              if len(word)%i == 0:
                  flg = 1
          if flg == 0 or len(word) == 2:
              new_lst.append(word)
      return " ".join(new_lst)
test: |+
  def check(candidate):

      # Check some simple cases
      assert candidate("This is a test") == "is"
      assert candidate("lets go for swimming") == "go for"
      assert candidate("there is no place available here") == "there is no place"
      assert candidate("Hi I am Hussein") == "Hi am Hussein"
      assert candidate("go for it") == "go for it"

      # Check some edge cases that are easy to work out by hand.
      assert candidate("here") == ""
      assert candidate("here is") == "is"

---
task_id: HumanEval/144
prompt: |2

  def simplify(x, n):
      """Your task is to implement a function that will simplify the expression
      x * n. The function returns True if x * n evaluates to a whole number and False
      otherwise. Both x and n, are string representation of a fraction, and have the following format,
      <numerator>/<denominator> where both numerator and denominator are positive whole numbers.

      You can assume that x, and n are valid fractions, and do not have zero as denominator.

      simplify("1/5", "5/1") = True
      simplify("1/6", "2/1") = False
      simplify("7/10", "10/2") = False
      """
entry_point: simplify
canonical_solution: |2
      a, b = x.split("/")
      c, d = n.split("/")
      numerator = int(a) * int(c)
      denom = int(b) * int(d)
      if (numerator/denom == int(numerator/denom)):
          return True
      return False
test: |+
  def check(candidate):

      # Check some simple cases
      assert candidate("1/5", "5/1") == True, 'test1'
      assert candidate("1/6", "2/1") == False, 'test2'
      assert candidate("5/1", "3/1") == True, 'test3'
      assert candidate("7/10", "10/2") == False, 'test4'
      assert candidate("2/10", "50/10") == True, 'test5'
      assert candidate("7/2", "4/2") == True, 'test6'
      assert candidate("11/6", "6/1") == True, 'test7'
      assert candidate("2/3", "5/2") == False, 'test8'
      assert candidate("5/2", "3/5") == False, 'test9'
      assert candidate("2/4", "8/4") == True, 'test10'


      # Check some edge cases that are easy to work out by hand.
      assert candidate("2/4", "4/2") == True, 'test11'
      assert candidate("1/5", "5/1") == True, 'test12'
      assert candidate("1/5", "1/5") == False, 'test13'

---
task_id: HumanEval/145
prompt: |2

  def order_by_points(nums):
      """
      Write a function which sorts the given list of integers
      in ascending order according to the sum of their digits.
      Note: if there are several items with similar sum of their digits,
      order them based on their index in original list.

      For example:
      >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
      >>> order_by_points([]) == []
      """
entry_point: order_by_points
canonical_solution: "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n"
test: |+
  def check(candidate):

      # Check some simple cases
      assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
      assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]
      assert candidate([]) == []
      assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]
      assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]
      assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]

      # Check some edge cases that are easy to work out by hand.
      assert True, "This prints if this assert fails 2 (also good for debugging!)"

---
task_id: HumanEval/146
prompt: "\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n"
entry_point: specialFilter
canonical_solution: "    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n"
test: "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, -2, 1, -5]) == 0  \n    assert candidate([15, -73, 14, -15]) == 1\n    assert candidate([33, -2, -3, 45, 21, 109]) == 2\n    assert candidate([43, -12, 93, 125, 121, 109]) == 4\n    assert candidate([71, -2, -33, 75, 21, 19]) == 3\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1]) == 0              \n    assert candidate([]) == 0                   \n\n"
---
task_id: HumanEval/147
prompt: "\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n"
entry_point: get_max_triples
canonical_solution: |2
      A = [i*i - i + 1 for i in range(1,n+1)]
      ans = []
      for i in range(n):
          for j in range(i+1,n):
              for k in range(j+1,n):
                  if (A[i]+A[j]+A[k])%3 == 0:
                      ans += [(A[i],A[j],A[k])]
      return len(ans)
test: |
  def check(candidate):

      assert candidate(5) == 1
      assert candidate(6) == 4
      assert candidate(10) == 36
      assert candidate(100) == 53361
---
task_id: HumanEval/148
prompt: "\ndef bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n"
entry_point: bf
canonical_solution: |2
      planet_names = ("Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune")
      if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:
          return ()
      planet1_index = planet_names.index(planet1)
      planet2_index = planet_names.index(planet2)
      if planet1_index < planet2_index:
          return (planet_names[planet1_index + 1: planet2_index])
      else:
          return (planet_names[planet2_index + 1 : planet1_index])
test: "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\"), \"First test error: \" + str(len(candidate(\"Jupiter\", \"Neptune\")))      \n    assert candidate(\"Earth\", \"Mercury\") == (\"Venus\",), \"Second test error: \" + str(candidate(\"Earth\", \"Mercury\"))  \n    assert candidate(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"), \"Third test error: \" + str(candidate(\"Mercury\", \"Uranus\"))      \n    assert candidate(\"Neptune\", \"Venus\") == (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"), \"Fourth test error: \" + str(candidate(\"Neptune\", \"Venus\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Earth\", \"Earth\") == ()\n    assert candidate(\"Mars\", \"Earth\") == ()\n    assert candidate(\"Jupiter\", \"Makemake\") == ()\n\n"
---
task_id: HumanEval/149
prompt: |2

  def sorted_list_sum(lst):
      """Write a function that accepts a list of strings as a parameter,
      deletes the strings that have odd lengths from it,
      and returns the resulted list with a sorted order,
      The list is always a list of strings and never an array of numbers,
      and it may contain duplicates.
      The order of the list should be ascending by length of each word, and you
      should return the list sorted by that rule.
      If two words have the same length, sort the list alphabetically.
      The function should return a list of strings in sorted order.
      You may assume that all words will have the same length.
      For example:
      assert list_sort(["aa", "a", "aaa"]) => ["aa"]
      assert list_sort(["ab", "a", "aaa", "cd"]) => ["ab", "cd"]
      """
entry_point: sorted_list_sum
canonical_solution: |2
      lst.sort()
      new_lst = []
      for i in lst:
          if len(i)%2 == 0:
              new_lst.append(i)
      return sorted(new_lst, key=len)
test: |+
  def check(candidate):

      # Check some simple cases
      assert candidate(["aa", "a", "aaa"]) == ["aa"]
      assert candidate(["school", "AI", "asdf", "b"]) == ["AI", "asdf", "school"]
      assert candidate(["d", "b", "c", "a"]) == []
      assert candidate(["d", "dcba", "abcd", "a"]) == ["abcd", "dcba"]

      # Check some edge cases that are easy to work out by hand.
      assert candidate(["AI", "ai", "au"]) == ["AI", "ai", "au"]
      assert candidate(["a", "b", "b", "c", "c", "a"]) == []
      assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == ["cc", "dd", "aaaa", "bbbb"]

---
task_id: HumanEval/150
prompt: "\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n"
entry_point: x_or_y
canonical_solution: |2
      if n == 1:
          return y
      for i in range(2, n):
          if n % i == 0:
              return y
              break
      else:
          return x
test: "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7, 34, 12) == 34\n    assert candidate(15, 8, 5) == 5\n    assert candidate(3, 33, 5212) == 33\n    assert candidate(1259, 3, 52) == 3\n    assert candidate(7919, -1, 12) == -1\n    assert candidate(3609, 1245, 583) == 583\n    assert candidate(91, 56, 129) == 129\n    assert candidate(6, 34, 1234) == 1234\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 2, 0) == 0\n    assert candidate(2, 2, 0) == 2\n\n"
---
task_id: HumanEval/151
prompt: "\ndef double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n"
entry_point: double_the_difference
canonical_solution: |2
      return sum([i**2 for i in lst if i > 0 and i%2!=0 and "." not in str(i)])
test: |+
  def check(candidate):

      # Check some simple cases
      assert candidate([]) == 0 , "This prints if this assert fails 1 (good for debugging!)"
      assert candidate([5, 4]) == 25 , "This prints if this assert fails 2 (good for debugging!)"
      assert candidate([0.1, 0.2, 0.3]) == 0 , "This prints if this assert fails 3 (good for debugging!)"
      assert candidate([-10, -20, -30]) == 0 , "This prints if this assert fails 4 (good for debugging!)"


      # Check some edge cases that are easy to work out by hand.
      assert candidate([-1, -2, 8]) == 0, "This prints if this assert fails 5 (also good for debugging!)"
      assert candidate([0.2, 3, 5]) == 34, "This prints if this assert fails 6 (also good for debugging!)"
      lst = list(range(-99, 100, 2))
      odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])
      assert candidate(lst) == odd_sum , "This prints if this assert fails 7 (good for debugging!)"

---
task_id: HumanEval/152
prompt: "\ndef compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n"
entry_point: compare
canonical_solution: |2
      return [abs(x-y) for x,y in zip(game,guess)]
test: |+
  def check(candidate):

      # Check some simple cases
      assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], "This prints if this assert fails 1 (good for debugging!)"
      assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], "This prints if this assert fails 1 (good for debugging!)"
      assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], "This prints if this assert fails 1 (good for debugging!)"
      assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], "This prints if this assert fails 1 (good for debugging!)"

      # Check some edge cases that are easy to work out by hand.
      assert True, "This prints if this assert fails 2 (also good for debugging!)"

---
task_id: HumanEval/153
prompt: "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n"
entry_point: Strongest_Extension
canonical_solution: |2+
      strong = extensions[0]
      my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])
      for s in extensions:
          val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])
          if val > my_val:
              strong = s
              my_val = val

      ans = class_name + "." + strong
      return ans

test: "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n    \n"
---
task_id: HumanEval/154
prompt: |2

  def cycpattern_check(a , b):
      """You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word
      cycpattern_check("abcd","abd") => False
      cycpattern_check("hello","ell") => True
      cycpattern_check("whassup","psus") => False
      cycpattern_check("abab","baa") => True
      cycpattern_check("efef","eeff") => False
      cycpattern_check("himenss","simen") => True

      """
entry_point: cycpattern_check
canonical_solution: |2
      l = len(b)
      pat = b + b
      for i in range(len(a) - l + 1):
          for j in range(l + 1):
              if a[i:i+l] == pat[j:j+l]:
                  return True
      return False
test: |+
  def check(candidate):

      # Check some simple cases
      #assert True, "This prints if this assert fails 1 (good for debugging!)"

      # Check some edge cases that are easy to work out by hand.
      #assert True, "This prints if this assert fails 2 (also good for debugging!)"
      assert  candidate("xyzw","xyw") == False , "test #0"
      assert  candidate("yello","ell") == True , "test #1"
      assert  candidate("whattup","ptut") == False , "test #2"
      assert  candidate("efef","fee") == True , "test #3"
      assert  candidate("abab","aabb") == False , "test #4"
      assert  candidate("winemtt","tinem") == True , "test #5"

---
task_id: HumanEval/155
prompt: |2

  def even_odd_count(num):
      """Given an integer. return a tuple that has the number of even and odd digits respectively.

       Example:
          even_odd_count(-12) ==> (1, 1)
          even_odd_count(123) ==> (1, 2)
      """
entry_point: even_odd_count
canonical_solution: |2
      even_count = 0
      odd_count = 0
      for i in str(abs(num)):
          if int(i)%2==0:
              even_count +=1
          else:
              odd_count +=1
      return (even_count, odd_count)
test: |+
  def check(candidate):

      # Check some simple cases
      assert candidate(7) == (0, 1)
      assert candidate(-78) == (1, 1)
      assert candidate(3452) == (2, 2)
      assert candidate(346211) == (3, 3)
      assert candidate(-345821) == (3, 3)
      assert candidate(-2) == (1, 0)
      assert candidate(-45347) == (2, 3)
      assert candidate(0) == (1, 0)


      # Check some edge cases that are easy to work out by hand.
      assert True

---
task_id: HumanEval/156
prompt: |2

  def int_to_mini_roman(number):
      """
      Given a positive integer, obtain its roman numeral equivalent as a string,
      and return it in lowercase.
      Restrictions: 1 <= num <= 1000

      Examples:
      >>> int_to_mini_roman(19) == 'xix'
      >>> int_to_mini_roman(152) == 'clii'
      >>> int_to_mini_roman(426) == 'cdxxvi'
      """
entry_point: int_to_mini_roman
canonical_solution: "    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n"
test: |+
  def check(candidate):

      # Check some simple cases
      assert candidate(19) == 'xix'
      assert candidate(152) == 'clii'
      assert candidate(251) == 'ccli'
      assert candidate(426) == 'cdxxvi'
      assert candidate(500) == 'd'
      assert candidate(1) == 'i'
      assert candidate(4) == 'iv'
      assert candidate(43) == 'xliii'
      assert candidate(90) == 'xc'
      assert candidate(94) == 'xciv'
      assert candidate(532) == 'dxxxii'
      assert candidate(900) == 'cm'
      assert candidate(994) == 'cmxciv'
      assert candidate(1000) == 'm'

      # Check some edge cases that are easy to work out by hand.
      assert True

---
task_id: HumanEval/157
prompt: "\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n"
entry_point: right_angle_triangle
canonical_solution: |2
      return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b
test: |+
  def check(candidate):

      # Check some simple cases
      assert candidate(3, 4, 5) == True, "This prints if this assert fails 1 (good for debugging!)"
      assert candidate(1, 2, 3) == False
      assert candidate(10, 6, 8) == True
      assert candidate(2, 2, 2) == False
      assert candidate(7, 24, 25) == True
      assert candidate(10, 5, 7) == False
      assert candidate(5, 12, 13) == True
      assert candidate(15, 8, 17) == True
      assert candidate(48, 55, 73) == True

      # Check some edge cases that are easy to work out by hand.
      assert candidate(1, 1, 1) == False, "This prints if this assert fails 2 (also good for debugging!)"
      assert candidate(2, 2, 10) == False

---
task_id: HumanEval/158
prompt: |2

  def find_max(words):
      """Write a function that accepts a list of strings.
      The list contains different words. Return the word with maximum number
      of unique characters. If multiple strings have maximum number of unique
      characters, return the one which comes first in lexicographical order.

      find_max(["name", "of", "string"]) == "string"
      find_max(["name", "enam", "game"]) == "enam"
      find_max(["aaaaaaa", "bb" ,"cc"]) == ""aaaaaaa"
      """
entry_point: find_max
canonical_solution: |2
      return sorted(words, key = lambda x: (-len(set(x)), x))[0]
test: |+
  def check(candidate):

      # Check some simple cases
      assert (candidate(["name", "of", "string"]) == "string"), "t1"
      assert (candidate(["name", "enam", "game"]) == "enam"), 't2'
      assert (candidate(["aaaaaaa", "bb", "cc"]) == "aaaaaaa"), 't3'
      assert (candidate(["abc", "cba"]) == "abc"), 't4'
      assert (candidate(["play", "this", "game", "of","footbott"]) == "footbott"), 't5'
      assert (candidate(["we", "are", "gonna", "rock"]) == "gonna"), 't6'
      assert (candidate(["we", "are", "a", "mad", "nation"]) == "nation"), 't7'
      assert (candidate(["this", "is", "a", "prrk"]) == "this"), 't8'

      # Check some edge cases that are easy to work out by hand.
      assert (candidate(["b"]) == "b"), 't9'
      assert (candidate(["play", "play", "play"]) == "play"), 't10'

---
task_id: HumanEval/159
prompt: "\ndef eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n"
entry_point: eat
canonical_solution: |2
      if(need <= remaining):
          return [ number + need , remaining-need ]
      else:
          return [ number + remaining , 0]
test: |+
  def check(candidate):

      # Check some simple cases
      assert True, "This prints if this assert fails 1 (good for debugging!)"
      assert candidate(5, 6, 10) == [11, 4], "Error"
      assert candidate(4, 8, 9) == [12, 1], "Error"
      assert candidate(1, 10, 10) == [11, 0], "Error"
      assert candidate(2, 11, 5) == [7, 0], "Error"

      # Check some edge cases that are easy to work out by hand.
      assert True, "This prints if this assert fails 2 (also good for debugging!)"
      assert candidate(4, 5, 7) == [9, 2], "Error"
      assert candidate(4, 5, 1) == [5, 0], "Error"

---
task_id: HumanEval/160
prompt: "\ndef do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n"
entry_point: do_algebra
canonical_solution: |2
      expression = str(operand[0])
      for oprt, oprn in zip(operator, operand[1:]):
          expression+= oprt + str(oprn)
      return eval(expression)
test: |+
  def check(candidate):

      # Check some simple cases
      assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37
      assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9
      assert candidate(['//', '*'], [7, 3, 4]) == 8, "This prints if this assert fails 1 (good for debugging!)"

      # Check some edge cases that are easy to work out by hand.
      assert True, "This prints if this assert fails 2 (also good for debugging!)"

---
task_id: HumanEval/161
prompt: "\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n"
entry_point: solve
canonical_solution: |2
      flg = 0
      idx = 0
      new_str = list(s)
      for i in s:
          if i.isalpha():
              new_str[idx] = i.swapcase()
              flg = 1
          idx += 1
      s = ""
      for i in new_str:
          s += i
      if flg == 0:
          return s[len(s)::-1]
      return s
test: |
  def check(candidate):

      # Check some simple cases
      assert candidate("AsDf") == "aSdF"
      assert candidate("1234") == "4321"
      assert candidate("ab") == "AB"
      assert candidate("#a@C") == "#A@c"
      assert candidate("#AsdfW^45") == "#aSDFw^45"
      assert candidate("#6@2") == "2@6#"

      # Check some edge cases that are easy to work out by hand.
      assert candidate("#$a^D") == "#$A^d"
      assert candidate("#ccc") == "#CCC"

      # Don't remove this line:
---
task_id: HumanEval/162
prompt: |2

  def string_to_md5(text):
      """
      Given a string 'text', return its md5 hash equivalent string.
      If 'text' is an empty string, return None.

      >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
      """
entry_point: string_to_md5
canonical_solution: |2
      import hashlib
      return hashlib.md5(text.encode('ascii')).hexdigest() if text else None
test: |+
  def check(candidate):

      # Check some simple cases
      assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
      assert candidate('') == None
      assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'
      assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'

      # Check some edge cases that are easy to work out by hand.
      assert True

---
task_id: HumanEval/163
prompt: |2

  def generate_integers(a, b):
      """
      Given two positive integers a and b, return the even digits between a
      and b, in ascending order.

      For example:
      generate_integers(2, 8) => [2, 4, 6, 8]
      generate_integers(8, 2) => [2, 4, 6, 8]
      generate_integers(10, 14) => []
      """
entry_point: generate_integers
canonical_solution: |2
      lower = max(2, min(a, b))
      upper = min(8, max(a, b))

      return [i for i in range(lower, upper+1) if i % 2 == 0]
test: |+
  def check(candidate):

      # Check some simple cases
      assert candidate(2, 10) == [2, 4, 6, 8], "Test 1"
      assert candidate(10, 2) == [2, 4, 6, 8], "Test 2"
      assert candidate(132, 2) == [2, 4, 6, 8], "Test 3"
      assert candidate(17,89) == [], "Test 4"

      # Check some edge cases that are easy to work out by hand.
      assert True, "This prints if this assert fails 2 (also good for debugging!)"

